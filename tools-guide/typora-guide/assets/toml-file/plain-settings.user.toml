#-------------------------------------------------------------------------
#  plain settings.user.toml file
#  modified in 2024-12-16
#-------------------------------------------------------------------------


############### global ###############
# 通用配置
[global]
# 总开关，若为false，则禁用全部插件
ENABLE = true
# 低于0.9.98版本的Typora运行此插件系统时，提出不兼容警告
SHOW_INCOMPATIBLE_WARNING = true
# 如何退出交互状态的代码块
# 如果你使用了图表插件（kanban、markmap、echarts等等）并且开启交互模式（INTERACTIVE_MODE置为true），那么列表至少填入一个，否则你将无法退出交互模式
# - click_exit_button:  为图表添加一个【编辑】按钮，当点击【编辑】按钮时退出交互模式
# - ctrl_click_fence:   ctrl+click图表退出交互模式
EXIT_INTERACTIVE_MODE = ["click_exit_button"]


############### window_tab ###############
[window_tab]
# 启用插件
ENABLE = true
# 插件名称
NAME = "typora-tab"
# 拖拽排序标签页的方式
#   1：类似于jetbrains
#   2：类似于vscode
DRAG_STYLE = 1
# 标签的标题是否去除文件后缀名（filename.md -> filename）
REMOVE_FILE_SUFFIX = true
# 当出现同名文件时，同时显示其父目录（filename.md -> dir/filename.md）
SHOW_DIR_FOR_SAME_NAME_FILE = true
# 当鼠标悬停于标签页时，显示文件的完整路径
SHOW_FULL_PATH_WHEN_HOVER = true
# 显示标签页的关闭按钮
SHOW_TAB_CLOSE_BUTTON = false
# 标签页Y轴防抖：拖拽标签页，若垂直高度变化很小，则保持Y轴不变，帮助更好的排序标签页（仅当DRAG_STYLE=1时生效。为什么不给2做此功能？答：vscode也没有做）
LIMIT_TAB_Y_AXIS_WHEN_DRAG = true
# 禁止垂直拖拽（仅当DRAG_STYLE=1时生效。若为true，则HEIGHT_SCALE失效）
LIMIT_TAB_ROI = false
# 当Typora使用【一体化】窗口样式时，是否隐藏标题栏
HIDE_WINDOW_TITLE_BAR = true
# ctrl+click标签，新建窗口打开
CTRL_CLICK_TO_NEW_WINDOW = false
# 当鼠标悬停于标签页时，允许使用【ctrl+鼠标滚轮】切换标签页
CTRL_WHEEL_TO_SCROLL = true
# 鼠标中键点击标签页关闭标签页
MIDDLE_CLICK_TO_CLOSE = true
# 限制最多打开x个标签，超过时会删除最左边的tab（若为-1，则无限制）
TAB_MAX_NUM = -1
# 鼠标向下拖拽标签，当拖拽的垂直距离超过标签本身的x倍高度时，视为新建窗口打开此文件（若为-1，则不启用此功能）
HEIGHT_SCALE = -1
# tab最小宽度（填入css长度，如200px、12em，不可超过400px）
TAB_MIN_WIDTH = "100px"
# tab最大宽度（填入css长度，如200px、12em，不可超过400px）
TAB_MAX_WIDTH = "none"
# 标签栏和正文内容之间的间隙高度（单位：px）
GAP_BETWEEN_TAB_AND_CONTENT = 0
# 当关闭最后一个标签时:
#   - reconfirm: 弹出弹窗确认是否退出Typora
#   - exit:      退出Typora
#   - blankPage: 展示空白页（此选项仅新版本Typora可用，低版本下此选项会自动修改为reconfirm）
WHEN_CLOSE_LAST_TAB = "blankPage"
# 新增tab的位置：
#   - end:   在最右侧
#   - right: 在当前tab右侧
NEW_TAB_AT = "right"
# 关闭当前的tab的时候，激活哪个tab
#   - left:   当前tab的左侧
#   - right:  当前tab的右侧
#   - latest: 上一个浏览的tab
ACTIVE_TAB_WHEN_CLOSE = "right"
# 关闭标签页的快捷键
CLOSE_HOTKEY = ["ctrl+w"]
# 切换下一个标签页的快捷键
SWITCH_NEXT_TAB_HOTKEY = ["ctrl+PageDown", "ctrl+Tab"]
# 切换上一个标签页的快捷键
SWITCH_PREVIOUS_TAB_HOTKEY = ["ctrl+PageUp", "ctrl+shift+Tab"]
# 复制当前文件路径的快捷键（若置为[]，则不设置）
COPY_PATH_HOTKEY = []
# 鼠标右击标签页，弹出的右键菜单列表（若置为[]，则不使用此功能）
# 支持如下功能：
#   - closeTab:        关闭标签
#   - closeOtherTabs:  关闭其他标签
#   - closeLeftTabs:   关闭左侧全部标签
#   - closeRightTabs:  关闭右侧全部标签
#   - copyPath:        复制文件路径
#   - showInFinder:    打开文件位置
#   - openInNewWindow: 新窗口打开
#   - sortTabs:        排序标签
CONTEXT_MENU = ["closeTab", "closeOtherTabs", "closeLeftTabs", "closeRightTabs", "sortTabs", "copyPath", "showInFinder", "openInNewWindow"]
# typora1.1版本以后，支持使用锚点跳转到本地文件，是否拦截处理（从新建窗口改成新建标签页）
# 参考1：https://support.typora.io/zh/What's-New-1.1/#文件链接
# 参考2：https://support.typora.io/Links/#internal-links
INTERCEPT_INTERNAL_AND_LOCAL_LINKS = true


############### search_multi ###############
[search_multi]
# 启用插件
ENABLE = false
# 插件名称
NAME = "search-multi"
# 快捷键
HOTKEY = "ctrl+shift+p"
# 允许通过【ctrl+鼠标拖拽输入框】拖动窗口
ALLOW_DRAG = true
# 自动隐藏窗口
AUTO_HIDE = false
# 当输入框为空，且键入backspace时，隐藏窗口
BACKSPACE_TO_HIDE = true
# 展示文件路径时使用相对路径
RELATIVE_PATH = true
# 鼠标悬停到搜索项时展示文件的修改时间
# 此选项时为了通过额外的信息帮助查找文件（我嫌弃它扎眼就没开启，如果你总是找不到目标文件，可以置为true）
SHOW_MTIME = false
# 搜索内容时大小写敏感（此处配置的是默认值，使用时可以在页面通过点击按钮重新设置）
CASE_SENSITIVE = false
# 查找文件的最大尺寸。大于MAX_SIZE的文件在搜索时将被忽略。若<0则不忽略任何文件
# 注意：Typora只支持打开小于2000000字节的文件，所以不建议修改成比2000000还大的值，毕竟找到了也不能在typora里打开
MAX_SIZE = 2000000
# 查找文件的后缀名，此外的文件在搜索时将被忽略
# 注意：默认值为Typora允许打开的文件的后缀名列表。所以不建议新增后缀名，毕竟找到了也不能在typora里打开
ALLOW_EXT = ["", "md", "markdown", "mdown", "mmd", "text", "txt", "rmarkdown", "mkd", "mdwn", "mdtxt", "rmd", "mdtext", "apib"]
# 查找文件时忽略的目录名
IGNORE_FOLDERS = [".git", "node_modules"]
# 高亮的颜色
# 每个关键字按序对应一个颜色，数量不限，你可以修改、新增、删除颜色
STYLE_COLOR = [
    '#bbeeff', '#ffbbcc', '#88ee88', '#ccbbff', '#ffee88', '#FFFFa0', '#88cccc', '#ffbb88', '#cccccc', '#ffaabb',
    '#99ccff', '#ff99cc', '#66cc66', '#cc99ff', '#ffcc66', '#FFFF80', '#dd9966', '#aaaaaa', '#66aaaa', '#dd6699',
]


############### commander ###############
[commander]
# 启用插件
ENABLE = false
# 插件名称
NAME = "command-line"
# 快捷键
HOTKEY = ""
# 允许【ctrl+鼠标拖拽输入框】拖动窗口
ALLOW_DRAG = true
# 当输入框为空，且键入backspace时，隐藏窗口
BACKSPACE_TO_HIDE = true
# 在【快捷键】和【右键菜单】中调用内建命令，是否弹出窗口
#   - always  总是弹出
#   - error   只在异常时弹出
#   - silent  总是静默
#   - echo    立即弹出并回显程序输出、适合需要不断打印日志的耗时任务
QUICK_EXEC_SHOW = "error"
# 【在命令输入框里回车】和【点击执行按钮】执行命令时，使用的回显类型
#   - always  等待程序执行完毕后一次性输出
#   - echo    立即回显程序输出
COMMIT_EXEC_SHOW = "echo"
# 内建命令列表。
#   - name:   展示的名称（必须唯一）
#   - shell:  cmd/bash、powershell、gitbash、wsl（如果使用gitbash、wsl，请确保已经将其加入环境变量。非windows平台则后三者不可用）
#   - hotkey: 快捷键（可选）
#   - cmd:    执行的命令
# 内置环境变量:
#   - $f: 当前文件路径
#   - $d: 当前文件所属目录
#   - $m: 当前挂载目录（侧边栏的根目录）
BUILTIN = [
    { name = "", shell = "cmd/bash", cmd = "" }, # dummy
    { name = "Explorer", shell = "powershell", cmd = "explorer $d" },
    { name = "Vscode", shell = "cmd/bash", cmd = "code $f" },
    { name = "WT", shell = "cmd/bash", cmd = "cd $d && wt" },
    { name = "GitCommit", shell = "cmd/bash", cmd = 'cd $m && git add . && git commit -m "update"' },
]


############### md_padding ###############
[md_padding]
# 启用插件
ENABLE = true
# 插件名称
NAME = "Chinese-English-Opt"
# 快捷键
HOTKEY = "ctrl+shift+b"
# 仅在选区中生效：当框选文字时，调用此功能只会对当前框选的文字生效
FORMAT_IN_SELECTION_ONLY = true
# 不希望拆分的词组（这些字词内部和前后禁止加空格）
IGNORE_WORDS = []
# 不希望拆分的正则词组（这些正则内部和前后禁止加空格）
IGNORE_PATTERNS = ["<br\\s*?/>", ":[0-9a-z_\\-]+?:"]
# 最多连续X个换行符，多余的删除（若为-1，则不使用此功能，推荐为2）
# 举例，为2时：\n\n\n\n【a】\n\n\n\n\n【b】 -> \n\n【a】\n\n【b】
LINE_BREAK_MAX_NUM = 2


############### read_only ###############
[read_only]
# 启用插件
ENABLE = false
# 插件名称
NAME = "read-only"
# 进入和脱离只读模式的快捷键
HOTKEY = "ctrl+shift+r"
# 默认使用只读模式（打开Typora就进入只读模式）
READ_ONLY_DEFAULT = false
# 只读状态下，点击图片和行内公式不会自动展开
NO_EXPAND_WHEN_READ_ONLY = true
# 只读状态下，自动收缩展开的图片和行内公式（当NO_EXPAND_WHEN_READ_ONLY为ture时，此选项失效）
# 此选项的意思是：当图片和行内公式展开后，点击其他地方，展开的图片和行内公式是否自动收回去
REMOVE_EXPAND_WHEN_READ_ONLY = true
# 只读状态下，左键单击超链接即可打开网址（普通模式下需要 click+左键）
CLICK_HYPERLINK_TO_OPEN_WHEN_READ_ONLY = false
# 只读状态下，禁用右键菜单
DISABLE_CONTEXT_MENU_WHEN_READ_ONLY = true
# 只读状态下禁用右键菜单的时候，哪些菜单选项保持可用（可选值需要您打开调试工具，查找其中data-key）
REMAIN_AVAILABLE_MENU_KEY = ["typora-plugin", "dev-tool", "copy-img"]
# 开启只读模式后，右下角数字统计区域出现的提示文字
SHOW_TEXT = "ReadOnly"


############### dark ###############
[dark]
# 启用插件
ENABLE = false
# 插件名称
NAME = "dark-mode"
# 进入和脱离夜间模式的快捷键
HOTKEY = ""
# 默认进入夜间模式
DARK_DEFAULT = false


############### no_image ###############
[no_image]
# 启用插件
ENABLE = false
# 插件名称
NAME = "no-image"
# 进入和脱离无图模式的快捷键
HOTKEY = ""
# 当处于无图模式时，鼠标悬停时重新显示图片
RESHOW_WHEN_HOVER = true
# 默认进入无图模式
DEFAULT_NO_IMAGE_MODE = false
# 动画持续时间（单位：ms）
TRANSITION_DURATION = 300
# 延迟动画时间（单位：ms）
TRANSITION_DELAY = 0


############### toolbar ###############
[toolbar]
# 启用插件
ENABLE = false
# 插件名称
NAME = "toolbar"
# 快捷键
HOTKEY = "ctrl+j"
# 当输入框为空，且键入backspace时，隐藏窗口
BACKSPACE_TO_HIDE = true
# 当鼠标点击其他地方时，隐藏窗口
AUTO_HIDE = true
# 等待输入法输入完毕后才执行搜索
IGNORE_WHEN_COMPOSITION = true
# toolbar的在页面的20%位置出现
TOOLBAR_TOP_PERCENT = 20
# toolbar的宽度为页面的80%
TOOLBAR_WIDTH_PERCENT = 80
# 用户输入的防抖时间（单位：ms）（用户输入完70ms后才执行）
# 为什么时间默认这么短？答：都是非常简单的查询，基本都是直接从内存取的
DEBOUNCE_INTERVAL = 70

# 用户键入内容 = 搜索工具名称 + 空格 + 搜索内容
# eg：【ops 资源管理器打开】

# 如果没有匹配到搜索工具，使用默认工具
#   - ""     不使用默认
#   - plu    插件
#   - tab    当前标签页
#   - his    最近文件
#   - ops    常用操作
#   - mode   切换文件模式
#   - theme  切换主题
#   - out    文档大纲
#   - func   功能列表
#   - all    混合查找（所有项目都混在一起查找）
DEFAULT_TOOL = "func"
# 是否使用负向查询（类似于google）
# 举例1：【plu multi -search】
#   - 若为true： 查找【包含multi关键字，但是不包含search关键字】的插件
#   - 若为false：查找【包含multi关键字，同时包含-search关键字】的插件
# 举例2：【his close -win -mark 标签】
#   - 若为true： 查找最近打开的文件，要求文件标题【包含close、标签，不包含win、mark】
#   - 若为false：查找最近打开的文件，要求文件标题【包含close、-win、-mark、标签】
USE_NEGATIVE_SEARCH = true


############### blur ###############
[blur]
# 启用插件（此插件无法在低版本Typora使用）
ENABLE = false
# 插件名称
NAME = "blur-mode"
# 快捷键
HOTKEY = ""
# 默认使用模糊模式（打开Typora就进入模糊模式）
BLUR_DEFAULT = false
# 模糊类型:
#   - blur：非聚焦组件变模糊
#   - hide：非聚焦组件直接隐藏
BLUR_TYPE = "blur"
# 鼠标悬停时可见（BLUR_TYPE为hide时失效）
RESRTORE_WHEN_HOVER = true
# 模糊等级: 数值越大越模糊（BLUR_TYPE为hide时失效）
BLUR_LEVEL = 10


############### resize_image ###############
[resize_image]
# 启用插件
ENABLE = false
# 插件名称
NAME = "resize-image"
# 各个功能对应的修饰键（为空则不使用对应的功能）
#   - TEMPORARY  : 临时修改图片大小
#   - PERSISTENT : 将图片转为HTML格式，永久修改图片大小
# 举例：【TEMPORARY = "alt"】：当鼠标悬停于图片，并且【alt+滚轮】后，就会临时修改图片大小
MODIFIER_KEY = { TEMPORARY = "alt", PERSISTENT = "" }
# 允许图片超出范围
ALLOW_OVERSIZE = true
# 图片水平位置：center/left/right
IMAGE_ALIGN = "center"
# 记住图片的放缩状态（直到关闭typora）
RECORD_RESIZE = true


############### datatables ###############
[datatables]
# 启用插件
ENABLE = false
# 插件名称
NAME = "table-enhance"
# 是否分页
PAGING = true
# 使用分页时，单页显示的数据条数
PAGE_LENGTH = 25
# 开启垂直滚动条(表格的高度)，<0则全部显示
SCROLLY = -1
# 当显示更少的记录时，是否允许表格减少高度
SROLL_COLLAPSE = true
# 是否使用排序功能
ORDERING = true
# 是否在初始化的时候排序
DEFAULT_ORDER = false
# 是否使用搜索
SEARCHING = true
# 在搜索或者过滤时，是否不区分大小写
CASE_INSENSITIVE = true
# 对在搜索中是否正则表达式
REGEX = false


############### go_top ###############
[go_top]
# 启用插件
ENABLE = true
# 插件名称
NAME = "home-end"
# 到顶的快捷键
HOTKEY_GO_TOP = "Ctrl + Home"
# 到底的快捷键
HOTKEY_GO_BOTTOM = "Ctrl + End"


############### markmap ###############
[markmap]
# 启用插件
ENABLE = false
# 插件名称
NAME = "Markmap"
# js/css从何处加载: local/network
RESOURCE_FROM = "local"

# markmap共有两个功能：toc和fence。此为toc，功能：以弹窗的形式展示当前文件的思维导图
# 若为false，以下配置全部失效
ENABLE_TOC_MARKMAP = true
# 快捷键
TOC_HOTKEY = ""
# 点击markmap节点，定位到文档位置（跳转到对应章节）（若为false，则LOCALE_HEIGHT_RATIO选项失效）
CLICK_TO_LOCALE = true
# 定位时，目标章节滚动到当前视口的高度位置百分比（即：0为当前视口的第一行，1为最后一行）
LOCALE_HEIGHT_RATIO = 0.2
# 兼容文档存在的跳级标题（MD001规范）（若为false，那么就会过滤掉跳级的标题）
FIX_ERROR_LEVEL_HEADER = true
# 当用户编辑文档，导致markmap更新图形时，新markmap的图形大小是否重新适配窗口
AUTO_FIT_WHEN_UPDATE = true
# 当用户调整窗口大小后，图形是否重新适配窗口
AUTO_FIT_WHEN_RESIZE = true
# 当用户编辑文档，导致markmap更新图形时，已折叠的节点是否不再重新展开
REMEMBER_FOLD_WHEN_UPDATE = true
# 折叠markmap节点时，自动折叠章节（此功能为实验性特性，依赖collapse_paragraph插件，目前不推荐开启）
AUTO_COLLAPSE_PARAGRAPH_WHEN_FOLD = false
# 初始化时，弹窗占据页面的90%宽度
WIDTH_PERCENT_WHEN_INIT = 90
# 初始化时，弹窗占据页面的35%高度
HEIGHT_PERCENT_WHEN_INIT = 35
# 当pin到页面顶部时，占据页面的30%高度
HEIGHT_PERCENT_WHEN_PIN_UP = 30
# 当pin到页面右侧时，占据页面的50%宽度
WIDTH_PERCENT_WHEN_PIN_RIGHT = 50
# 当鼠标悬停于节点时，显示边框的样式
BORDER_STYLE_WHEN_NODE_HOVER = "4px solid #FF7B00"
# 候选的配色方案。默认是D3 categorical schemes：https://d3js.org/d3-scale-chromatic/categorical
CANDIDATE_COLOR_SCHEMES = [
    ['#B3E2CD', '#FDCDAC', '#CBD5E8', '#F4CAE4', '#E6F5C9', '#FFF2AE', '#F1E2CC', '#CCCCCC'],
    ['#66C2A5', '#FC8D62', '#8DA0CB', '#E78AC3', '#A6D854', '#FFD92F', '#E5C494', '#B3B3B3'],
    ['#1B9E77', '#D95F02', '#7570B3', '#E7298A', '#66A61E', '#E6AB02', '#A6761D', '#666666'],
    ['#7FC97F', '#BEAED4', '#FDC086', '#FFFF99', '#386CB0', '#F0027F', '#BF5B17', '#666666'],
    ['#FBB4AE', '#B3CDE3', '#CCEBC5', '#DECBE4', '#FED9A6', '#FFFFCC', '#E5D8BD', '#FDDAEC', '#F2F2F2'],
    ['#E41A1C', '#377EB8', '#4DAF4A', '#984EA3', '#FF7F00', '#FFFF33', '#A65628', '#F781BF', '#999999'],
    ['#4E79A7', '#F28E2C', '#E15759', '#76B7B2', '#59A14F', '#EDC949', '#AF7AA1', '#FF9DA7', '#9C755F', '#BAB0AB'],
    ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F', '#BCBD22', '#17BECF'],
    ['#A6CEE3', '#1F78B4', '#B2DF8A', '#33A02C', '#FB9A99', '#E31A1C', '#FDBF6F', '#FF7F00', '#CAB2D6', '#6A3D9A', '#FFFF99', '#B15928'],
    ['#8DD3C7', '#FFFFB3', '#BEBADA', '#FB8072', '#80B1D3', '#FDB462', '#B3DE69', '#FCCDE5', '#D9D9D9', '#BC80BD', '#CCEBC5', '#FFED6F'],
]
# 默认的toc图形选项
#   - autoFit           : 折叠/展开节点时，图形是否重新适配窗口
#   - duration          : 折叠/展开节点时，图形变换动画的持续时间（单位：ms）
#   - initialExpandLevel: 首次渲染时要展开多少级分支（-1则展开全部）
#   - colorFreezeLevel  : 多少级开始固定分支颜色
#   - zoom              : 是否允许缩放
#   - pan               : 是否允许平移
#   - color             : 配色方案（填入颜色数组，如['#1f77b4', '#17becf']）
#   - maxWidth          : 节点最大长度（0则无长度限制）
#   - spacingHorizontal : 节点水平间距
#   - spacingVertical   : 节点垂直间距
#   - paddingX          : 节点内部边距
#   - fitRatio          : 图形的窗口填充率
DEFAULT_TOC_OPTIONS = { autoFit = true, duration = 500, initialExpandLevel = -1, maxWidth = 0, spacingHorizontal = 80, spacingVertical = 5, fitRatio = 0.95, paddingX = 8, colorFreezeLevel = 6, zoom = true, pan = true, color = ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F', '#BCBD22', '#17BECF'] }
# 导出svg时的文件名
#   - {{filename}}  : 当前文件名
#   - {{timestamp}} : 时间戳
#   - {{uuid}}      : uuid
FILENAME_WHEN_DOWNLOAD_SVG = "{{filename}}_{{timestamp}}.svg"
# 导出svg时的目录路径(如D:\\tmp\\img)，为空时使用 temp 目录
FOLDER_WHEN_DOWNLOAD_SVG = ""
# 导出svg时，尽力兼容样式问题(有些SVG解析器无法解析CSS变量，此选项会自动替换CSS变量)
COMPATIBLE_STYLE_WHEN_DOWNLOAD_SVG = true
# 导出svg时，是否删除无用的className以减小文件体积
REMOVE_USELESS_CLASS_NAME_WHEN_DOWNLOAD_SVG = false
# 导出svg时，是否删除foreignObject，并替换成<text>（若您不了解SVG，请不要修改此选项）
# - false: 操作含有foreignObject的svg标签处处受限（比如说转为jpg），但是有好看的样式
# - true:  操作不受限，但是丢失了样式
REMOVE_FOREIGN_OBJECT_WHEN_DOWNLOAD_SVG = false
# 导出前弹出路径选择对话框
SHOW_DIALOG_WHEN_DOWNLOAD_SVG = true
# 自动在资源管理器打开svg所在目录
SHOW_IN_FINDER_WHEN_DOWNLOAD_SVG = true
# 导出svg时，边框留白的宽度
# 第一项为左右宽度之和，第二项为上下宽度之和
BORDER_WHEN_DOWNLOAD_SVG = [50, 50]

# markmap共有两个功能：toc和fence。此为fence，功能：在当前鼠标光标处插入markmap代码块
# 若为false，以下配置全部失效
ENABLE_FENCE_MARKMAP = true
# 快捷键
FENCE_HOTKEY = ""
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改FENCE_TEMPLATE选项里的语言
LANGUAGE = "markmap"
# 默认处于交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 代码块默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 代码块背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 默认的fence图形选项
#   - duration          : 折叠/展开节点时的动画持续时间（单位：ms）
#   - initialExpandLevel: 初始渲染时要展开的最大节点级别（-1则展开全部）
#   - colorFreezeLevel  : 多少级开始固定分支颜色
#   - zoom              : 是否允许缩放
#   - pan               : 是否允许平移
#   - height            : 图形高度
#   - color             : 配色方案（填入颜色数组，如['#1f77b4', '#17becf']）
#   - backgroundColor   : 背景色
#   - maxWidth          : 节点最大长度（0则无长度限制）
#   - spacingHorizontal : 节点水平间距
#   - spacingVertical   : 节点垂直间距
#   - paddingX          : 节点内部边距
#   - fitRatio          : 图形的窗口填充率
DEFAULT_FENCE_OPTIONS = { duration = 500, initialExpandLevel = -1, colorFreezeLevel = 6, zoom = false, pan = false, maxWidth = 0, spacingHorizontal = 80, spacingVertical = 5, paddingX = 8, fitRatio = 0.95, height = "300px", backgroundColor = "#f8f8f8", color = ['#1F77B4', '#FF7F0E', '#2CA02C', '#D62728', '#9467BD', '#8C564B', '#E377C2', '#7F7F7F', '#BCBD22', '#17BECF'] }
# 插入的模板
FENCE_TEMPLATE = """```markmap
---
# 根节点默认文本（若内容存在根节点，则此选项失效）
title: markmap
# 配置:
markmap:
  # 是否允许缩放
  zoom: false
  # 是否允许平移
  pan: false
  # 节点最大长度（0则无长度限制）
  maxWidth: 0
  # 节点水平间距
  spacingHorizontal: 80
  # 节点垂直间距
  spacingVertical: 5
  # 节点内部边距
  paddingX: 8
  # 图形的窗口填充率
  fitRatio: 0.95
  # 展开的最大节点级别（-1则展开全部）
  initialExpandLevel: -1
  # 多少级开始固定分支颜色
  colorFreezeLevel: 6
  # 颜色
  color: ['#4E79A7', '#F28E2C', '#E15759', '#76B7B2', '#59A14F', '#EDC949', '#AF7AA1', '#FF9DA7', '#9C755F', '#BAB0AB']
  # 动画持续时间
  duration: 500
  # 图形高度
  height: 300px
  # 背景色
  backgroundColor: "#f8f8f8"
---

## Links

- [Website](https://markmap.js.org/)
- [GitHub](https://github.com/gera2ld/markmap)

## Features

Note that if blocks and lists appear at the same level, the lists will be ignored.

### Lists

- **strong** ~~del~~ *italic* ==highlight==
- `inline code`
- [x] checkbox
- Katex: $x = {-b \\pm \\sqrt{b^2-4ac} \\over 2a}$ <!-- markmap: fold -->
  - [More Katex Examples](#?d=gist:af76a4c245b302206b16aec503dbe07b:katex.md)
- Now we can wrap very very very very long text based on `maxWidth` option

### Blocks

| Products | Price |
|-|-|
| Apple | 4 |
| Banana | 2 |
"""


############### auto_number ###############
[auto_number]
# 启用插件
ENABLE = false
# 插件名称
NAME = "auto-number"
# 启用侧边栏自动编号
ENABLE_SIDE_BAR = true
# 启用正文自动编号
ENABLE_CONTENT = true
# 启用TOC自动编号
ENABLE_TOC = true
# 启用表格自动编号
ENABLE_TABLE = true
# 启用图片自动编号
ENABLE_IMAGE = true
# 启用代码块自动编号
ENABLE_FENCE = true
# 导出时运用样式
ENABLE_WHEN_EXPORT = true
# 展示图片的名称（若ENABLE_IMAGE为false，此选项失效）
# 注意：不建议开启此选项，会消耗较多资源
SHOW_IMAGE_NAME = false
# 编号的下标使用的字体
FONT_FAMILY = "monospace"
# 编号的下标的位置：left/right/center
ALIGN = "center"
# 编号的下标名称
NAMES = { table = "Table", image = "Figure", fence = "Fence" }


############### fence_enhance ###############
[fence_enhance]
# 启用插件
ENABLE = true
# 插件名称
NAME = "fence-enhance"

# fence_enhance插件包含4个功能：button、hotkey、fold、other。此为button，功能：在代码块右上角添加按钮
# 若置为false，以下配置全部失效
ENABLE_BUTTON = true
# 按钮的大小
BUTTON_SIZE = "1.2em"
# 按钮的颜色
BUTTON_COLOR = "currentColor"
# 按钮的间距
BUTTON_MARGIN = "0.4em"
# 按钮的位置: top
BUTTON_TOP = "0.3em"
# 按钮的位置: right
BUTTON_RIGHT = "0.5em"
# 按钮的不透明度
BUTTON_OPACITY = 0.5
# 鼠标悬停时按钮的不透明度
BUTTON_OPACITY_HOVER = 0.8
# 去掉按钮上的功能提示
REMOVE_BUTTON_HINT = false
# 自动隐藏按钮，鼠标移动到代码块才显示（注意：就算置为true，在折叠状态下的代码块也不会自动隐藏按钮。因为必须提醒用户这个代码块处于折叠状态）
AUTO_HIDE = false
# 启用复制代码功能
ENABLE_COPY = true
# 启用代码调整缩进功能（低版本Typora不可使用此功能）
ENABLE_INDENT = false
# 启用折叠代码功能
ENABLE_FOLD = false
# 折叠形式：
#   - hidden: 隐藏除第一行外的所有行
#   - scroll: 添加滚动条（可视高度只有一行，所以非常反人类）
FOLD_OVERFLOW = "hidden"
# 默认折叠所有代码块
FOLD_DEFAULT = false
# 操作成功时，icon提示的保持时间（单位：ms）
# 当你点击【复制代码】按钮后，icon会变成【✔】，并在保持一段时间后自动恢复。此选项就是设置这个保持时间
WAIT_RECOVER_INTERVAL = 1000
# 自定义按钮
# 目前此插件有三个按钮：复制，缩进，折叠。此选项可以新增按钮
# 此配置是【风险】配置，如果您没有javascript基础，请不要修改此配置
#   DISABLE:   是否禁用此按钮
#   ICON:      按钮图标。填入css class。支持font-awesome-4.1.0。所有的图标及其对应的css class请参考：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf
#   HINT:      提示信息
#   ON_INIT:   初始化函数的字符串，此函数只会最开始时被调用一次。传入的参数为：plugin，即：插件实例。例如：plu => console.log('custom fence button has init')。如果不需要，请置为空。
#   ON_RENDER: 渲染后的回调函数的字符串，页面每渲染一个代码块，都会自动调用此函数。传入的参数为：buttonElement，即：按钮标签。例如: btn => console.log('btn has render')。如果不需要，请置为空。
#   ON_CLICK:  鼠标点击时的回调函数的字符串，传入的参数为：{ev, btn, cont, fence, cid, plu}，即：click事件，按钮标签，代码块文本，代码块元素，cid，插件实例。例如：({cont}) => console.log(cont)。不可为空。
CUSTOM_BUTTONS = [
    { DISABLE = true, ICON = "fa fa-bomb", HINT = "demo", ON_INIT = "", ON_RENDER = "", ON_CLICK = "({cont}) => console.log(cont)" },
]

# fence_enhance插件包含4个功能：button、hotkey、fold、other。此为hotkey，功能：为代码块添加快捷键
# 若置为false，以下配置全部失效
# 注意：此处的快捷键使用的是codeMirror的表示方式（参考: https://codemirror.net/5/doc/manual.html#keymaps）
ENABLE_HOTKEY = false
# 不建议修改下面的快捷键，原因有二：
#   1. 和很多ide的快捷键保持一致
#   2. typora强制绑定了很多快捷键，实际可修改的快捷键并不多
# typora强制绑定的快捷键如下：
#   1. Ctrl-A:         "selectAll",
#   2. Ctrl-Up:        "goDocStart",
#   3. Ctrl-Down:      "goDocEnd",
#   4. Ctrl-Left:      "goGroupLeft",
#   5. Ctrl-Right:     "goGroupRight",
#   6. Alt-Left:       "goLineStart",
#   7. Alt-Right:      "goLineEnd",
#   8. Ctrl-Backspace: "delGroupBefore",
#   9. Ctrl-Delete:    "delGroupAfter",
#   10.Ctrl-[:         "indentLess",
#   11.Ctrl-]:         "indentMore",
#   12.Ctrl-U:         "undoSelection",
#   13.Shift-Ctrl-U:   "redoSelection",
#   14.Alt-U:          "redoSelection",

# 如果不想使用某个功能，请置为""
# 将当前行和上一行互换
SWAP_PREVIOUS_LINE = "Shift-Alt-Up"
# 将当前行和下一行互换
SWAP_NEXT_LINE = "Shift-Alt-Down"
# 复制当前行到上一行
COPY_PREVIOUS_LINE = "Ctrl-Alt-Up"
# 复制当前行到下一行
COPY_NEXT_LINE = "Ctrl-Alt-Down"
# 直接在上面新建一行
INSERT_LINE_PREVIOUS = "Shift-Ctrl-Enter"
# 直接在下面新建一行
INSERT_LINE_NEXT = "Ctrl-Enter"

# fence_enhance插件包含4个功能：button、hotkey、fold、other。此为fold，功能：针对不同代码语言做行号和折叠
# 支持根据代码语言的语法折叠代码
ENABLE_LANGUAGE_FOLD = false

# fence_enhance插件包含4个功能：button、hotkey、fold、other。此为other
# 长文本的换行会保持相同的缩进
#   1. 详见：https://github.com/codemirror/codemirror5/issues/2085
#   2. 不建议开启此功能，有较大的性能损失，会消耗大量时间去计算缩进
INDENTED_WRAPPED_LINE = false
# 高亮鼠标悬停的代码行（我嫌弃晃眼就没有开启，如果你总是找不到光标，可以开启）
HIGHLIGHT_WHEN_HOVER = false
# 通过代码块的语言设置高亮行
# 使用方法：在语言后面添加小括号，小括号注明需要高亮的行
# 举例：```js(2, 5-8, 10-12)```  表示：高亮js代码块的第2行，第5-8，10-12行
HIGHLIGHT_BY_LANGUAGE = false
# 代码行高亮时的颜色
HIGHLIGHT_LINE_COLOR = "rgba(176, 178, 180, 0.4)"


############### collapse_paragraph ###############
[collapse_paragraph]
# 启用插件
# 此插件与Typora的原生配置【显示当前块元素的Markdown源码】冲突，如果开启此插件，那么原生配置会被关闭
ENABLE = false
# 插件名称
NAME = "collapse-paragraph"
# 严格模式
# - true:  只当点击到h1~h6时，才触发折叠/展开
# - false: 若没有点击到h1~h6，会自动向上寻找最近的h1~h6，并触发折叠/展开。非严格模式可能会出现意想不到的事：ctrl+click在typora是非常常用的，当你不小心点错位置，标题就被折叠起来了
STRICT_MODE = true
# 在右键菜单中使用严格模式
# 此选项是STRICT_MODE的特别情况，是考虑到方便使用才添加此选项的
# 若置为false，那么右键菜单不再严格限制光标必须在标题行中，在正文区域任意位置右键就可以显示所有菜单选项
STRICT_MODE_IN_CONTEXT_MENU = false
# 记住章节是否折叠（直到关闭typora）
RECORD_COLLAPSE = true
# 各个功能对应的修饰键
#   1. 支持ctrl/alt/shift的随意组合（如"shift+alt"，"ctrl+shift"）
#   2. 但是不能为"alt"（因为alt+click已经被【scrollBookmarker】插件占用），也不能为"shift"（因为shift+click被系统自带的【框选】功能占用）
#   3. 若为""，表示不启用此功能
#   4. 例如【COLLAPSE_SIBLINGS = "ctrl+alt"】：当用户同时按住键盘ctrl和alt，并且鼠标click标题时，会折叠/展开父章节下所有同级的章节
# 功能：
#   - COLLAPSE_SINGLE       ：折叠/展开 单个章节
#   - COLLAPSE_SIBLINGS     ：折叠/展开 父章节下所有同级的章节
#   - COLLAPSE_ALL_SIBLINGS ：折叠/展开 当前文件所有同级的章节
#   - COLLAPSE_RECURSIVE    ：递归折叠/展开 当前章节
MODIFIER_KEY = { COLLAPSE_SINGLE = "ctrl", COLLAPSE_SIBLINGS = "ctrl+alt", COLLAPSE_ALL_SIBLINGS = "ctrl+shift+alt", COLLAPSE_RECURSIVE = "" }


############### collapse_list ###############
[collapse_list]
# 启用插件
ENABLE = false
# 插件名称
NAME = "collapse-list"
# 缩放标志的颜色，若为空，则跟随系统配色
TRIANGLE_COLOR = ""
# 记住章节是否折叠（直到关闭typora）
RECORD_COLLAPSE = true


############### collapse_table ###############
[collapse_table]
# 启用插件
ENABLE = false
# 插件名称
NAME = "collapse-table"
# 记住章节是否折叠（直到关闭typora）
RECORD_COLLAPSE = true


############### truncate_text ###############
[truncate_text]
# 启用插件
ENABLE = false
# 插件名称
NAME = "truncate-text"
# 快捷键：隐藏前面的文本段
HIDE_FRONT_HOTKEY = ""
# 快捷键：显示全部的文本段
SHOW_ALL_HOTKEY = ""
# 快捷键：根据当前视图隐藏文本段
HIDE_BASE_VIEW_HOTKEY = ""
# hide_front截断后剩余文本段的数量
REMAIN_LENGTH = 80


############### export_enhance ###############
[export_enhance]
# 启用插件
ENABLE = false
# 插件名称
NAME = "export-enhance"
# 是否下载网络图片（若为true，有可能因为网络问题导致导出超时）
# 若置为false，则DOWNLOAD_THREADS选项失效
DOWNLOAD_NETWORK_IMAGE = false
# 下载网络图片的并发量（不建议设置得太高，否则可能触发网站/图床的反爬策略）
DOWNLOAD_THREADS = 10


############### resize_table ###############
[resize_table]
# 启用插件
ENABLE = false
# 插件名称
NAME = "resize-table"
# 是否去除表格单元格最小宽度限制
REMOVE_MIX_WIDTH = true
# 单元格边线的拖拽范围（单位：px）
THRESHOLD = 20
# 记住表格放缩状态（直到关闭typora）
RECORD_RESIZE = true


############### text_stylize ###############
[text_stylize]
# 启用插件
ENABLE = false
# 插件名称
NAME = "text-style"
# 面板的背景颜色。若为""，则跟随主题的配色方案
MODAL_BACKGROUND_COLOR = ""
# 弹出面板的快捷键
SHOW_MODAL_HOTKEY = ""
# 工具栏的按钮:
#   - weight:                加粗
#   - italic:                斜体
#   - underline:             下划线
#   - throughline:           中划线
#   - overline:              上划线
#   - superScript:           上标
#   - subScript:             下标
#   - emphasis:              强调符号
#   - blur:                  模糊
#   - title:                 标题尺寸
#   - increaseSize:          增大尺寸
#   - decreaseSize:          减小尺寸
#   - increaseLetterSpacing: 增大间隙
#   - decreaseLetterSpacing: 减小间隙
#   - family:                字体
#   - foregroundColor:       前景色
#   - backgroundColor:       背景色
#   - borderColor:           边框
#   - erase:                 移除格式
#   - blank:                 无功能，用于占位
#   - setBrush:              设置格式刷
#   - useBrush:              使用格式刷
#   - move:                  移动工具栏
#   - close:                 关闭工具栏
TOOLBAR = [
    "weight", "italic", "underline", "throughline", "overline", "title", "superScript", "subScript",
    "emphasis", "blur", "increaseLetterSpacing", "decreaseLetterSpacing", "increaseSize", "decreaseSize", "family",
    "foregroundColor", "backgroundColor", "borderColor", "setBrush", "useBrush", "erase", "blank", "move", "close"
]
# 设置样式的快捷键
#   1. hotkey: 快捷键
#   2. action: 上述的工具栏按钮
ACTION_HOTKEYS = [
    { hotkey = "", action = "foregroundColor" },
    { hotkey = "", action = "backgroundColor" },
]
# 颜色列表（由于markdown支持的html语法限制， 不支持rgb、rgba格式的颜色）
COLORS = [
    "#330000", "#331900", "#333300", "#193300", "#003300", "#003319", "#003333", "#001933", "#000033", "#190033", "#330033", "#330019", "#000000",
    "#660000", "#663300", "#666600", "#336600", "#006600", "#006633", "#006666", "#003366", "#000066", "#330066", "#660066", "#660033", "#202020",
    "#990000", "#994C00", "#999900", "#4C9900", "#009900", "#00994C", "#009999", "#004C99", "#000099", "#4C0099", "#990099", "#99004C", "#404040",
    "#CC0000", "#CC6600", "#CCCC00", "#66CC00", "#00CC00", "#00CC66", "#00CCCC", "#0066CC", "#0000CC", "#6600CC", "#CC00CC", "#CC0066", "#606060",
    "#FF0000", "#FF8000", "#FFFF00", "#80FF00", "#00FF00", "#00FF80", "#00FFFF", "#0080FF", "#0000FF", "#7F00FF", "#FF00FF", "#FF007F", "#808080",
    "#FF3333", "#FF9933", "#FFFF33", "#99FF33", "#33FF33", "#33FF99", "#33FFFF", "#3399FF", "#3333FF", "#9933FF", "#FF33FF", "#FF3399", "#A0A0A0",
    "#FF6666", "#FFB266", "#FFFF66", "#B2FF66", "#66FF66", "#66FFB2", "#66FFFF", "#66B2FF", "#6666FF", "#B266FF", "#FF66FF", "#FF66B2", "#C0C0C0",
    "#FF9999", "#FFCC99", "#FFFF99", "#CCFF99", "#99FF99", "#99FFCC", "#99FFFF", "#99CCFF", "#9999FF", "#CC99FF", "#FF99FF", "#FF99CC", "#E0E0E0",
    "#FFCCCC", "#FFE5CC", "#FFFFCC", "#E5FFCC", "#CCFFCC", "#CCFFE5", "#CCFFFF", "#CCE5FF", "#CCCCFF", "#E5CCFF", "#FFCCFF", "#FFCCE5", "#FFFFFF",
]
# 每13个颜色一行
NUM_PER_LINE = 13
# 默认颜色
DEFAULT_COLORS = { FOREGROUND = "#330000", BACKGROUND = "#FFFFFF", BORDER = "#330000" }


############### cipher ###############
[cipher]
# 启用插件
ENABLE = false
# 插件名称
NAME = "encrypt-file"
# 加密快捷键
ENCRYPT_HOTKEY = ""
# 解密快捷键
DECRYPT_HOTKEY = ""
# 弹出提示弹窗
SHOW_HINT_MODAL = true


############### easy_modify ###############
[easy_modify]
# 启用插件
ENABLE = false
# 插件名称
NAME = "modify-tools"
# 快捷键：复制标题路径
HOTKEY_COPY_FULL_PATH = "ctrl+shift+y"
# 快捷键：提升选中文段的标题等级
HOTKEY_INCREASE_HEADERS_LEVEL = ""
# 快捷键：降低选中文段的标题等级
HOTKEY_DECREASE_HEADERS_LEVEL = ""
# 快捷键：提取选区文字到新文件
HOTKEY_EXTRACT_RANGE_TO_NEW_FILE = ""
# 快捷键：插入思维导图（mindmap）
HOTKEY_INSERT_MERMAID_MINDMAP = ""
# 快捷键：插入思维导图（graph）
HOTKEY_INSERT_MERMAID_GRAPH = ""
# 快捷键：添加结尾空格（根据严格的markdown换行语法，需要在结尾添加两个空格以表示换行）
HOTKEY_TRAILING_WHITE_SPACE = ""


############### custom ###############
[custom]
# 启用插件
# 若置为false，那么所有二级插件都会失效
# 若要修改二级插件的配置请前往同目录下的custom_plugin.user.toml
ENABLE = true
# 插件名称
NAME = "custom-plugin"
# 有些插件在当前光标位置下临时处于不可用状态，是否隐藏它
# 不建议置为true，原因有二：
#   1. 处于不可用状态的插件会在鼠标悬停时提示不可用的原因
#   2. 一直隐藏处于不可用状态的插件，可能导致你忘记该插件的存在
HIDE_DISABLE_PLUGINS = false


############### slash_commands ###############
[slash_commands]
# 启用插件
ENABLE = false
# 插件名称
NAME = "slash-commands"
# 什么样的用户输入触发显示命令列表（若您不了解正则表达式，请勿修改此配置）
#  注意：keyword需要使用命名捕获组kw
#  默认值：匹配一个字符串，该字符串以/或\或、开头，后面紧跟任意数量的非/或\或、字符，且该字符串前面不可有<
TRIGGER_REGEXP = "(?<!<)[\\/、\\\\](?<kw>[^\\/、\\\\]*)$"
# 匹配策略：
#  - prefix: 前缀。即：用户输入的字符串必须是keyword的前缀。比如：用户输入para即可找到paragraph
#  - substr: 子串。即：用户输入的字符串必须是keyword的子串。比如：用户输入graph即可找到paragraph
#  - abbr:   缩写。即：用户输入的每个字符必须都存在于keyword中，并且其在keyword的索引递增。比如：用户输入pgh即可找到paragraph
MATCH_STRATEGY = "abbr"
# 命令列表
#  - enable:    是否启用
#  - type:      snippet/command/gen-snp（snippet: 在调用时插入文字片段；command: 在调用时执行逻辑命令；gen-snp: 在调用时执行函数，返回待插入的文字片段，适用于插入动态内容）
#  - scope:     当光标处在哪个位置可用。可选：plain/inline_math（默认为plain）
#  - icon(可选): 使用emoji作为图标
#  - hint(可选): 提示信息
#  - keyword:   关键词，必须唯一
#  - callback:  若type=snippet，则填入需要插入的文字片段；若type=command，则填入回调函数；若type=gen-snp，则填入返回字符串的函数
COMMANDS = [
    { enable = true, type = "command", icon = "📝", hint = "一级标题", keyword = "H1", callback = "() => File.editor.stylize.changeBlock('header1', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "二级标题", keyword = "H2", callback = "() => File.editor.stylize.changeBlock('header2', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "三级标题", keyword = "H3", callback = "() => File.editor.stylize.changeBlock('header3', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "四级标题", keyword = "H4", callback = "() => File.editor.stylize.changeBlock('header4', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "五级标题", keyword = "H5", callback = "() => File.editor.stylize.changeBlock('header5', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "六级标题", keyword = "H6", callback = "() => File.editor.stylize.changeBlock('header6', undefined, true)" },
    { enable = true, type = "command", icon = "📝", hint = "段落", keyword = "Paragraph", callback = "() => File.editor.stylize.changeBlock('paragraph')" },
    { enable = true, type = "command", icon = "📝", hint = "提升标题等级", keyword = "IncreaseHeaderLevel", callback = "() => File.editor.stylize.increaseHeaderLevel()" },
    { enable = true, type = "command", icon = "📝", hint = "降低标题等级", keyword = "DecreaseHeaderLevel", callback = "() => File.editor.stylize.decreaseHeaderLevel()" },
    { enable = true, type = "command", icon = "📝", hint = "表格", keyword = "Table", callback = "() => File.editor.tableEdit.insertTable()" },
    { enable = true, type = "command", icon = "📝", hint = "公式块", keyword = "BlockMath", callback = "() => File.editor.stylize.toggleMathBlock()" },
    { enable = true, type = "command", icon = "📝", hint = "代码块", keyword = "BlockCode", callback = "() => File.editor.stylize.toggleFences()" },
    { enable = true, type = "command", icon = "📝", hint = "引用", keyword = "Blockquote", callback = "() => File.editor.stylize.toggleIndent('blockquote')" },
    { enable = true, type = "command", icon = "📝", hint = "有序列表", keyword = "OrderedList", callback = "() => File.editor.stylize.toggleIndent('ol')" },
    { enable = true, type = "command", icon = "📝", hint = "无序列表", keyword = "UnorderedList", callback = "() => File.editor.stylize.toggleIndent('ul')" },
    { enable = true, type = "command", icon = "📝", hint = "任务列表", keyword = "Tasklist", callback = "() => File.editor.stylize.toggleIndent('tasklist')" },
    { enable = true, type = "command", icon = "📝", hint = "增加列表缩进", keyword = "ListMoreIndent", callback = "() => File.editor.UserOp.moreIndent(File.editor)" },
    { enable = true, type = "command", icon = "📝", hint = "减少列表缩进", keyword = "ListLessIndent", callback = "() => File.editor.UserOp.lessIndent(File.editor)" },
    { enable = true, type = "command", icon = "📝", hint = "在上方插入段落", keyword = "InsertParagraphAbove", callback = "() => File.editor.UserOp.insertParagraph(true)" },
    { enable = true, type = "command", icon = "📝", hint = "在下方插入段落", keyword = "InsertParagraphBelow", callback = "() => File.editor.UserOp.insertParagraph(false)" },
    { enable = true, type = "command", icon = "📝", hint = "链接引用", keyword = "DefLink", callback = "() => File.editor.stylize.insertBlock('def_link')" },
    { enable = true, type = "command", icon = "📝", hint = "脚注", keyword = "DefFootnote", callback = "() => File.editor.stylize.insertBlock('def_footnote')" },
    { enable = true, type = "command", icon = "📝", hint = "水平分割线", keyword = "Hr", callback = "() => File.editor.stylize.insertBlock('hr')" },
    { enable = true, type = "command", icon = "📝", hint = "内容目录", keyword = "Toc", callback = "() => File.editor.stylize.insertBlock('toc')" },
    { enable = true, type = "command", icon = "📝", hint = "元信息", keyword = "FrontMatter", callback = "() => File.editor.stylize.insertMetaBlock()" },
    { enable = true, type = "command", icon = "👕", hint = "粗体", keyword = "Strong", callback = "() => File.editor.stylize.toggleStyle('strong')" },
    { enable = true, type = "command", icon = "👕", hint = "斜体", keyword = "Em", callback = "() => File.editor.stylize.toggleStyle('em')" },
    { enable = true, type = "command", icon = "👕", hint = "下划线", keyword = "Underline", callback = "() => File.editor.stylize.toggleStyle('underline')" },
    { enable = true, type = "command", icon = "👕", hint = "代码", keyword = "Code", callback = "() => File.editor.stylize.toggleStyle('code')" },
    { enable = true, type = "command", icon = "👕", hint = "内联公式", keyword = "InlineMath", callback = "() => File.editor.stylize.toggleStyle('inline_math')" },
    { enable = true, type = "command", icon = "👕", hint = "删除线", keyword = "Delete", callback = "() =>File.editor.stylize.toggleStyle('del')" },
    { enable = true, type = "command", icon = "👕", hint = "注释", keyword = "Comment", callback = "() => File.editor.stylize.toggleStyle('comment')" },
    { enable = true, type = "command", icon = "👕", hint = "超链接", keyword = "Link", callback = "() => File.editor.stylize.toggleStyle('link')" },
    { enable = true, type = "command", icon = "👕", hint = "图像", keyword = "Image", callback = "() => File.editor.stylize.toggleStyle('image')" },
    { enable = true, type = "command", icon = "👕", hint = "清除样式", keyword = "ClearStyle", callback = "() => File.editor.stylize.clearStyle()" },
    { enable = true, type = "command", icon = "🧰", hint = "至顶部", keyword = "JumpTop", callback = "() => File.editor.selection.jumpTop()" },
    { enable = true, type = "command", icon = "🧰", hint = "至底部", keyword = "JumpBottom", callback = "() => File.editor.selection.jumpBottom()" },
    { enable = true, type = "command", icon = "🧰", hint = "至行首", keyword = "JumpToLineStart", callback = "() => File.editor.selection.jumpToLineStart()" },
    { enable = true, type = "command", icon = "🧰", hint = "至行尾", keyword = "JumpToLineEnd", callback = "() => File.editor.selection.jumpToLineEnd()" },
    { enable = true, type = "command", icon = "🧰", hint = "帮助", keyword = "Help", callback = "() => this.call()" },
    { enable = true, type = "gen-snp", icon = "🧩", hint = "日期时间", keyword = "Datetime", callback = "() => new Date().toLocaleString('chinese', {hour12: false})" },
    { enable = true, type = "gen-snp", icon = "🧩", hint = "日期", keyword = "Date", callback = "() => {let day = new Date(); return `${day.getFullYear()}/${day.getMonth() + 1}/${day.getDate()}`}" },
    { enable = true, type = "gen-snp", icon = "🧩", hint = "时间", keyword = "Time", callback = "() => {let day = new Date(); return `${day.getHours()}:${day.getMinutes()}:${day.getSeconds()}`}" },
    { enable = true, type = "gen-snp", icon = "🧩", hint = "时间戳", keyword = "Timestamp", callback = "() => new Date().getTime().toString()" },
    { enable = true, type = "gen-snp", icon = "🧩", hint = "星期", keyword = "Week", callback = "() => '星期' + '日一二三四五六'.charAt((new Date()).getDay())" },
    { enable = true, type = "snippet", icon = "🧩", hint = "示例片段", keyword = "SnippetExample", callback = "https://github.com/obgnail/typora_plugin" },
    { enable = true, type = "snippet", scope = "inline_math", icon = "🧩", keyword = "alpha", callback = "\\alpha " },
    { enable = true, type = "snippet", scope = "inline_math", icon = "🧩", keyword = "beta", callback = "\\beta " },
    { enable = true, type = "snippet", scope = "inline_math", icon = "🧩", keyword = "epsilon", callback = "\\epsilon " },
    { enable = true, type = "snippet", scope = "inline_math", icon = "🧩", keyword = "rightarrow", callback = "\\rightarrow " },
]


############### right_click_menu ###############
[right_click_menu]
# 启用插件
ENABLE = true
# 插件名称
NAME = "plugin-menu"
# 点击后是否隐藏菜单（此选项不必在此调整，可以在UI中设置）
DO_NOT_HIDE = false
# 展示插件的快捷键（此选项仅在正式版Typora可用）
SHOW_PLUGIN_HOTKEY = true
# 右键二~三级菜单的最小宽度
# 很多用户使用小屏幕，三个等级的右键菜单可能占据了大量的空间。此选项用于设置二~三级菜单的最小宽度，减少占据空间（为什么不包括一级？答：那是theme该做的事）
#  - default: 保持默认（和第一级菜单相同宽度）
#  - auto   : 最小宽度根据文本长度自适应
#  - 232px  : 最小宽度为232px（不一定是232，可以是任何正整数）
MENU_MIN_WIDTH = "default"
# 移除右键菜单中除了插件以外的选项（如果你之前从不使用右键菜单，可以置为true）
HIDE_OTHER_OPTIONS = false
# 对于【启用但是没有出现在下面MENUS选项】的插件，自动将其加入到最后一个MENU
# 强烈不建议将此选项置为false，若置为false，且在MENUS中删去那些处于启用状态的插件，那么：
#   1. 那些插件依旧处于启用状态，但是就不能通过右键菜单调用了
#   2. 如果插件系统后续新增了插件，那么你就根本无法感知到新增插件的存在
FIND_LOST_PLUGIN = true
# 自定义右键菜单
# 每一个MENUS对应一个一级菜单，允许无限添加一级菜单，允许重复添加同一个插件
#   NAME: 一级菜单的名称
#   LIST: 二级菜单的插件列表（"---"：代表在页面上插入一个分隔横线）
#         允许填入pluginName（插件，如：help）或者 pluginName.callArg（插件的其中一个选项，如：help.donate）
[[right_click_menu.MENUS]]
NAME = "rare-plugin"
LIST = [
    "window_tab",
    "fence_enhance",
    "auto_number",
    "datatables",
    "resize_image",
    "resize_table",
    "collapse_list",
    "collapse_table",
    "truncate_text",
    "export_enhance",
    "cipher",
    "right_click_menu",
    "help",
    "---",
    "pie_menu",
    "go_top",
    "slash_commands",
    "text_stylize",
    "hotkeys",
    "editor_width_slider",
    "ripgrep",
    "article_uploader",
    "preferences",
    "updater",
    "---",
    "file_counter",
    "json_rpc",
    "test",
]
[[right_click_menu.MENUS]]
NAME = "common-plugin"
LIST = [
    "commander",
    "markmap",
    "collapse_paragraph",
    "easy_modify",
    "custom",
    "---",
    "toolbar",
    "search_multi",
    "md_padding",
    "---",
    "read_only",
    "blur",
    "dark",
    "no_image",
]


############### pie_menu ###############
[pie_menu]
# 启用插件
ENABLE = false
# 插件名称
NAME = "round-menu"
# 快捷键
HOTKEY = ""
# 修饰键。支持ctrl/alt/shift的随意组合（如"shift+alt"，"ctrl+shift"）。举例：若为ctrl，则 ctrl+鼠标右击 调出圆盘菜单
MODIFIER_KEY = "ctrl"
# 按钮（强制少于16个，前8个在内圈，后8个在外圈）
#  - ICON    : 图标的css class
#  - CALLABCK: 填入pluginName.callArg（插件的其中一个选项，如：help.donate。如果插件只有一个选项，那么无需callArg）
BUTTONS = [
    { ICON = "fa fa-book", CALLBACK = "read_only" },
    { ICON = "fa fa-asterisk", CALLBACK = "blur" },
    { ICON = "fa fa-eye", CALLBACK = "no_image" },
    { ICON = "fa fa-adjust", CALLBACK = "dark" },
    { ICON = "fa fa-file-text", CALLBACK = "templater" },
    { ICON = "fa fa-align-justify", CALLBACK = "md_padding" },
    { ICON = "fa fa-paste", CALLBACK = "easy_modify.copy_full_path" },
    { ICON = "fa fa-list", CALLBACK = "toc" },
    { ICON = "fa fa-sitemap", CALLBACK = "markmap.toggle_toc" },
    { ICON = "fa fa-font", CALLBACK = "text_stylize" },
    { ICON = "fa fa-search", CALLBACK = "search_multi" },
    { ICON = "fa fa-image", CALLBACK = "imageReviewer" },
    { ICON = "fa fa-filter", CALLBACK = "resourceOperation" },
    { ICON = "fa fa-wrench", CALLBACK = "preferences" },
    { ICON = "fa fa-bookmark", CALLBACK = "scrollBookmarker" },
    { ICON = "fa fa-code", CALLBACK = "commander" }
]


############### preferences ###############
[preferences]
# 启用插件
ENABLE = true
# 插件名称
NAME = "启停插件"
# 快捷键
HOTKEY = ""
# 不允许通过此插件修改启停的插件
IGNORE_PLUGINS = ["preferences", "right_click_menu", "custom", "json_rpc", "openInTotalCommander", "redirectLocalRootUrl", "article_uploader"]


############### file_counter ###############
[file_counter]
# 启用插件
ENABLE = true
# 插件名称
NAME = "file-counter"
# 当目录下的文件数量少于等于IGNORE_MIN_NUM时，忽略此目录
IGNORE_MIN_NUM = 0
# Typora允许打开小于2000000(即MAX_FILE_SIZE)的文件，大于maxSize的文件在搜索时将被忽略。若maxSize<0则不过滤
MAX_SIZE = 2000000
# Typora允许打开的文件的后缀名，此外的文件在搜索时将被忽略
ALLOW_EXT = ["", "md", "markdown", "mdown", "mmd", "text", "txt", "rmarkdown", "mkd", "mdwn", "mdtxt", "rmd", "mdtext", "apib"]
# 忽略的目录名
IGNORE_FOLDERS = [".git", "node_modules"]
# 当侧边栏出现横向滚动条时，允许ctrl+wheel进行横向滚动
CTRL_WHEEL_TO_SCROLL_SIDEBAR_MENU = true
# 文本字体粗细（填入font-weight的CSS值，保持默认则填入""）
FONT_WEIGHT = ""
# 文本字体颜色（填入color的CSS值，保持默认则填入""）
COLOR = ""
# 文本背景颜色（填入background-color的CSS值，保持默认则填入""）
BACKGROUND_COLOR = ""
# 文本插入前缀
BEFORE_TEXT = ""


############### hotkeys ###############
[hotkeys]
# 启用插件
ENABLE = true
# 插件名称
NAME = "hotkeys"
# 查看注册的快捷键列表的快捷键
HOTKEY = ""

# 此配置是高级配置，仅对有javascript基础的用户开放，以下说明默认您了解javascript基础
# 使用说明:
#   - 用于配置自定义快捷键
#   - 以声明的形式，为【插件系统的任意函数】或【自定义函数】设置快捷键，也就是说让快捷键支持的最小粒度达到函数级别
#   - 具体可用的函数直接阅读源码
#   - 此插件不能覆盖现有的快捷键，此插件充分信任用户，没有做任何防护措施(也意味着很简陋，需要你自己调试)
# 参数说明:
#   - desc（可选）: 描述。可填写任意内容，对功能没有影响
#   - enable: 是否启用
#   - hotkey: 快捷键
#   - plugin: 调用的插件
#   - function: 调用插件的函数名
#   - closestSelector: 定位到当前光标的父元素，并将其作为参数传入function。如果function没有参数，则不需要此选项
#   - evil: 自定义回调函数，这里的文本内容会被eval()。如果设置此参数，那么plugin，function，closestSelector都会失效。
# 注意:
#   - eval是邪恶的，极端情况下会让你的电脑中毒，请谨慎处理 —— 试试将下面的【openCalc】的enable置为true，接着在typora键入快捷键。
#   - 如果你有把握，eval确实是很方便 —— 试试将下面的【switchFirstTab】的enable置为true，接着在typora键入快捷键。
#   - 由于eval的强大，你甚至可以注入插件系统，修改插件系统的行为（此时要将hotkey设置为【-】） —— 试试将下面的【alertWhenOpenFile】的enable置为true。
CUSTOM_HOTKEYS = [
    # 简单使用：fastInput
    { enable = false, hotkey = "ctrl+shift+e", desc = "快速插入javascript代码块", evil = '() => this.utils.insertText(null, "```javascript\n```", false);' },
    # 支持但邪恶的使用方法：openCalc
    { enable = false, hotkey = "ctrl+shift+e", desc = "打开windows计算器", evil = "() => this.utils.Package.ChildProcess.exec('cmd /C calc')" },
    # 支持但不推荐的使用方法：switchFirstTab
    { enable = false, hotkey = "ctrl+shift+e", desc = "切换到第一个标签", evil = "() => this.utils.getPlugin('window_tab').switchTab(0)" },
    # 支持但是不正常不推荐的使用方法：alertWhenOpenFile
    { enable = false, hotkey = "-", desc = "每当打开文件时都弹出提示窗口", evil = "this.utils.eventHub.addEventListener(this.utils.eventHub.eventType.fileOpened, filepath => window.confirm(`你打开了文件: ${filepath}`))" },
    # 正规使用方法：insertKanban
    { enable = false, hotkey = "ctrl+shift+e", desc = "在光标位置插入看板", plugin = "kanban", function = "callback" },
    # 正规使用方法：foldFence
    { enable = false, hotkey = "ctrl+[", desc = "当光标置于代码块中，按下此快捷键可以折叠/展开代码块", plugin = "fence_enhance", function = "foldFence",closestSelector = "#write .md-fences" },
]


############### help ###############
[help]
# 启用插件
ENABLE = true
# 插件名称
NAME = "help"


############### editor_width_slider ###############
[editor_width_slider]
# 启用插件
ENABLE = true
# 插件名称
NAME = "写作区宽度调整"
# 宽度百分比（小于0视为不启用）
WIDTH_RATIO = -1


############### article_uploader ###############
[article_uploader]
# 启用插件
ENABLE = false
# 插件名称
NAME = "article-autoupload"
# 在右键菜单隐藏
HIDE = false
# 快捷键配置
UPLOAD_ALL_HOTKEY = ""
UPLOAD_WORDPRESS_HOTKEY = ""
UPLOAD_CNBLOG_HOTKEY = ""
UPLOAD_CSDN_HOTKEY = ""
# 上传相关配置
[article_uploader.upload]
# 是否在上传之前弹出确认框（防误触）
reconfirm = true
# 改为false你可以看到selenium是怎么在浏览器中操作发表文章的
selenium = { headless = true }
# enabled: 置为false则在上传所有平台中不会上传到该平台
# hostname: 域名或ip：如137.2.3.1
# loginUrl: wordpress后台登录地址
wordpress = { enabled = true, hostname = "https://blog.bugdesigner.cn", loginUrl = "https://blog.bugdesigner.cn/superman/", username = "demo", password = "demo1" }
cnblog = { enabled = true, username = "demo2", password = "demo2" }
# # cookie可能需要定期更新，f12随便找一个异步请求的，把cookie值粘过来就行，目前两天安全下车，预计两周——一个月失效
csdn = { enabled = true, cookie = "log_Id_pv=27; log_Id_view=857; dc_tos=se1n4s; log_Id_click=37......" }


############### ripgrep ###############
[ripgrep]
# 启用插件
ENABLE = false
# 插件名称
NAME = "RipGrep"
# 快捷键
HOTKEY = ""
# 当输入框为空，且键入backspace时，隐藏窗口
BACKSPACE_TO_HIDE = true
# 宽度为页面的80%
WIDTH_PERCENT = 80
# 在页面的20%位置出现
TOP_PERCENT = 20


############### json_rpc ###############
[json_rpc]
# 启用插件
# 警告：开启此插件后，外部将拥有node、browser两套环境，能完全控制电脑，因此如果您不是开发人员，请勿开启此插件
ENABLE = false
# 插件名称
NAME = "json-rpc"
# rpc server选项
SERVER_OPTIONS = { port = 5080, host = "127.0.0.1", path = "/", strict = false }


############### updater ###############
[updater]
# 启用插件
ENABLE = true
# 插件名称
NAME = "update-plugin"
# 快捷键
HOTKEY = ""
# 众所周知，有些地区无法裸连github，需要使用代理（如：http://127.0.0.1:7890）
# 若值为空，则将弹出窗口，让用户填入代理；若值不为空，则将直接使用此代理，不再弹出窗口
# 除非你固定使用某代理，否则不建议使用此配置
PROXY = ""
# 是否启用自动静默升级（若为false，则以下配置全部失效）
# 自动升级有两个策略：
#   策略一：打开Typora一段时间后，执行一次升级流程
#   策略二：每隔一段时间，执行一次升级流程
AUTO_UPDATE = false
# 策略一（单位：ms，若<0，则不使用此策略；若<1分钟，则置为1分钟）
START_UPDATE_INTERVAL = 300000   # 1000 * 60 * 5
# 策略二（单位：ms，若<0，则不使用此策略；若<1小时，则置为1小时）
UPDATE_LOOP_INTERVAL = -1


############### test ###############
[test]
# 启用插件
# 此插件乃开发者于开发阶段使用，请勿开启
ENABLE = false
# 插件名称
NAME = "测试专用"
