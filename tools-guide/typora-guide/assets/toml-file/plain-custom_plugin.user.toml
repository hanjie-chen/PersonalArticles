#-------------------------------------------------------------------------
#  plain custom settings for custom_plugin
#  modified in 2024-12-15
#-------------------------------------------------------------------------


############### kanban ###############
[kanban]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Kanban"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "kanban"
# 严格模式：不会忽略存在语法错误的代码行，直接在页面上报错（此选项用于控制所有看板，如果设置为true，那么会强制所有看板进入严格模式）
# 也可以在代码块首行添加use strict，使得此代码块进入严格模式
STRICT_MODE = false
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 当描述为空时隐藏描述框
HIDE_DESC_WHEN_EMPTY = true
# 看板最大高度（单位：px）（若<0，则显示全部）
KANBAN_MAX_HEIGHT = 700
# 看板的宽度（单位：px）
KANBAN_WIDTH = 250
# 看板任务描述框的最大高度（单位：em）（若<0，则显示全部）
KANBAN_TASK_DESC_MAX_HEIGHT = -1
# 当看板数量太多时是否换行显示
WRAP = false
# 当鼠标位于看板时，ctrl+wheel滚动看板
CTRL_WHEEL_TO_SCROLL = true
# 允许在描述框使用markdown内联样式（code、strong、em、del、link、img）
ALLOW_MARKDOWN_INLINE_STYLE = true
# 看板框的颜色（请保持 KANBAN_COLOR 和 TASK_COLOR 数量一致，否则颜色会乱套，就不好看了）
KANBAN_COLOR = ["#FFE0B2", "#DAE9F4", "#FEDCCC", "#C6E5D9", "#FFF1B9"]
# 任务框的颜色
TASK_COLOR = ["#FFFDE7", "#F8FAFF", "#FFFFF2", "#FFFCF0", "#FFFFF5"]
# 自动插入的模板
TEMPLATE = """```kanban
use strict
# Today's task

## Todo
* 语法说明(一级标题表示看板标题\\n二级标题表示看板\\n- 或 * 表示任务)
- 描述框样式(支持在描述框添加 markdown 行内样式：\\n**加粗**，*斜体*，`代码`，~~删除~~，[链接](https://github.com/obgnail/typora_plugin)，![图片](https://avatars.githubusercontent.com/u/48992887?s=96&v=4))
- 严格模式(在首行添加 use strict 进入严格模式，将不会忽略语法错误)
- 当描述为空时隐藏描述框

## In-Progress
- 数量、配色(看板和任务都可以无限添加\\n\\n可以前往配置修改你喜欢的颜色)
- 当任务数量太多，出现滚动条时(可以将鼠标置于看板下，使用【鼠标滚轮】滚动任务)
- 当看板数量太多，出现滚动条时(可以将鼠标置于看板下，使用【ctrl+鼠标滚轮】滚动看板)

## Completed
- NOTE(语法是插件开发者定义的，无法通用，只建议【每日任务】临时使用)
```
"""


############### chat ###############
[chat]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Chat"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "chat"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 默认的选项
DEFAULT_OPIONS = { useStrict = true, showNickname = true, showAvatar = true, notAllowShowTime = false, allowMarkdown = true, senderNickname = "me", timeNickname = "time" }
# 自动插入的模板
TEMPLATE = """```chat
---
# 配置
# 进入严格模式（不忽略语法错误）
useStrict: false
# 展示用户名
showNickname: true
# 展示头像
showAvatar: true
# 不允许展示时间
notAllowShowTime: false
# 允许使用markdown语法
allowMarkdown: true
# 右侧发送者的用户名
senderNickname: me
# 时间的用户名
timeNickname: time
# 用户头像
avatars:
  me: https://avatars.githubusercontent.com/u/48992887?s=96&v=4
  nickname1: ./assets/1.jpg
---

time: 昨天 18:21

testUser1: 使用冒号分割用户名和消息

me: 右侧的用户名为 me，时间为 time。

me: 支持部分 markdown 语法。比如 **加粗**，*斜体*，`代码`，~~删除~~，[链接](https://github.com/obgnail/typora_plugin)，\\n![图片](https://avatars.githubusercontent.com/u/48992887?s=96&v=4)

nickname1: 支持使用 yaml 格式的 front matter 修改配置（就和 markdown 一样）\\n\\n其中的 avatars 选项用于配置用户的头像，如果没有配置头像，默认为用户名的首字符\\n\\n你可以试试在本文件所属目录下添加 `./assets/1.jpg` 文件，便可以看到对应用户的头像被修改了

注意: 支持导出成 HTML、PDF 等格式。语法是插件开发者自定义的，不具备通用性

"""


############### timeline ###############
[timeline]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Timeline"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "timeline"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表背景颜色
BACKGROUND_COLOR = "#fafafa"
# 标题的字体颜色
TITLE_COLOR = "#555"
# 标题的字体大小
TITLE_FONT_SIZE = "1.5rem"
# 标题的字宽
TITLE_FONT_WEIGHT = "bold"
# 左侧时间线的颜色
LINE_COLOR = "#eee"
# 左侧时间线的宽度
LINE_WIDTH = "2px"
# 时间圆点的颜色
CIRCLE_COLOR = "#999"
# 时间圆点的直径
CIRCLE_DIAMETER = "0.7em"
# 时间圆点的位置: top
CIRCLE_TOP = "0.6em"
# 时间的字体颜色
TIME_COLOR = "#555"
# 自动插入的模板
TEMPLATE = """```timeline
# 使用一级标题表示 timeline 的标题

## 2022-10-1
### 使用二级标题表示时间，三到六级标题表示内容
支持简单的 markdown 语法
- 这是无序列表项 1
- 这是无序列表项 2
---
支持 **加粗**，*斜体*，`代码`，~~删除~~，[链接](https://github.com/obgnail/typora_plugin)，![图片](https://avatars.githubusercontent.com/u/48992887?s=96&v=4)
不支持代码块，因为开发者不希望代码块发生嵌套

## 2023-10-1
语法是开发者自定义的，谨慎使用。

"""


############### echarts ###############
[echarts]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Echarts"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "echarts"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 渲染器: canvas/svg（参考：https://echarts.apache.org/handbook/zh/best-practices/canvas-vs-svg/）
RENDERER = "svg"
# 导出时echarts转成什么格式
# 可选: png/jpg/svg
# 注意: png/jpg只有在canvas渲染器的时候可用，svg只有在使用svg渲染器的时候可用
EXPORT_TYPE = "svg"
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```echarts
// 提供内置变量:
//   1. myChart: echarts实例
//   2. echarts: echarts模块
//   3. option:  echarts实例的option
//   4. this:    echarts插件实例
// 更多示例：https://echarts.apache.org/examples/zh/index.html#chart-type-line
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

option = {
    tooltip: { trigger: 'item' },
    legend: { top: '5%', left: 'center' },
    series: [{
        name: 'Access From',
        type: 'pie',
        radius: ['40%', '70%'],
        avoidLabelOverlap: false,
        label: { show: false, position: 'center' },
        emphasis: { label: { show: true,  fontSize: 40,  fontWeight: 'bold' } },
        labelLine: { show: false },
        data: [
            {value: 1548, name: 'Search Engine'},
            {value: 735, name: 'Direct'},
            {value: 580, name: 'Email'},
            {value: 484, name: 'Union Ads'},
            {value: 310, name: 'Video Ads'}
        ]
    }]
}
```
"""


############### chart ###############
[chart]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Chart"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "chart"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```chart
// 提供内置变量:
//   1. Chart:   chart类
//   2. config:  chart的config
//   3. this:    chart插件实例
// API：https://chart.nodejs.cn/docs/latest/configuration/
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}

config = {
  type: "bar",
  data: {
    labels: ["Red", "Blue", "Yellow", "Green", "Purple", "Orange"],
    datasets: [{
      label: "# of Votes",
      data: [12, 19, 3, 5, 2, 3],
      backgroundColor: [
        "rgba(255, 99, 132, 0.2)", "rgba(54, 162, 235, 0.2)", "rgba(255, 206, 86, 0.2)",
        "rgba(75, 192, 192, 0.2)", "rgba(153, 102, 255, 0.2)", "rgba(255, 159, 64, 0.2)"
      ],
      borderColor: [
        "rgba(255, 99, 132, 1)", "rgba(54, 162, 235, 1)", "rgba(255, 206, 86, 1)",
        "rgba(75, 192, 192, 1)", "rgba(153, 102, 255, 1)", "rgba(255, 159, 64, 1)"
      ],
      borderWidth: 1
    }]
  }
}
```
"""


############### wavedrom ###############
[wavedrom]
# 是否启用此二级插件
enable = false
# 插件名称
name = "WaveDrom"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "wavedrom"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 是否启用安全模式（处于安全模式下，无法获取外部数据源）
SAFE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#fff"
# 自动插入的模板
TEMPLATE = """```wavedrom
// 教程: https://wavedrom.com/tutorial.html
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "300px", width: ""}
{
    signal: [
        { name: "pclk", wave: 'p.......' },
        { name: "Pclk", wave: 'P.......' },
        { name: "nclk", wave: 'n.......' },
        { name: "Nclk", wave: 'N.......' },
        { name: 'clk0', wave: 'phnlPHNL' },
        {},
        { name: 'clk1', wave: 'xhlhLHl.' },
        { name: 'clk2', wave: 'hpHplnLn' },
        { name: 'clk3', wave: 'nhNhplPl' },
        { name: 'clk4', wave: 'xlh.L.Hx' },
    ],
    config : { "hscale" : 1.4 }
}
```
"""


############### calendar ###############
[calendar]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Calendar"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "calendar"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "800px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```calendar
// 提供内置变量:
//   1. calendar: calendar实例
//   2. Calendar: Calendar类
//   3. option:   calendar的option
//   4. this:     calendar插件实例
// example：https://nhn.github.io/tui.calendar/latest/tutorial-06-daily-view
// API: https://github.com/nhn/tui.calendar/blob/main/docs/en/apis/options.md
// 代码块里的所有内容都会被eval，请注意安全问题
// 可以使用如下注释设置图表宽高（否则使用默认）：
// {height: "800px", width: ""}

const today = new Date();
const yesterday = new Date(today.getTime() - 24 * 60 * 60 * 1000);
const nextMonth = new Date(today.getFullYear(), today.getMonth() + 1, 1);

option = {defaultView: 'week'};
calendar.createEvents([
    {id: 'event1', calendarId: 'cal2', title: 'meeting', start: yesterday, end: today},
    {id: 'event2', calendarId: 'cal1', title: 'appointment', start: yesterday, end: nextMonth},
]);
```
"""


############### abc ###############
[abc]
# 是否启用此二级插件
enable = false
# 插件名称
name = "ABC"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "abc"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 乐谱的可视化选项，请参考: https://paulrosen.github.io/abcjs/visual/render-abc-options.html
# 常用的配置：
#   - scale: 用于指定乐谱的缩放比例。
#   - staffwidth: 用于指定乐谱谱表的宽度。
#   - responsive: 用于指定乐谱在响应式布局中的行为，例如 "resize" 表示在窗口大小改变时重新渲染乐谱。
VISUAL_OPTIONS = { scale = 1.0, staffwidth = 400, responsive = "resize" }
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "300px"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "#f8f8f8"
# 自动插入的模板
TEMPLATE = """```abc
X:1
T:Twinkle, Twinkle, Little Star
M:4/4
L:1/4
K:C
G2 G2|A2 A2|B2 B2|c3 z|G2 G2|A2 A2|B2 G2|c3 z||
```
"""

############### drawIO ###############
[drawIO]
# 是否启用此二级插件
enable = false
# 插件名称
name = "drawIO"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 依赖资源从何处加载
# 由于drawio的格式经常发生变动，官网强烈建议使用cdn获取依赖资源，而不是将依赖资源保存在本地。所以此插件默认从网络拉取依赖。如果你希望将依赖资源保存在本地，请按如下操作
#   1. 下载文件：https://viewer.diagrams.net/js/viewer-static.min.js
#   2. RESOURCE_URI修改为你自己的文件路径（比如：D:\\tmp\\viewer-static.min.js）
RESOURCE_URI = "https://viewer.diagrams.net/js/viewer-static.min.js"
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "drawio"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 图表默认高度
DEFAULT_FENCE_HEIGHT = "auto"
# 图表背景颜色
DEFAULT_FENCE_BACKGROUND_COLOR = "transparent"
# 自动插入的模板
TEMPLATE = """```drawio
/**
 * 由于.drawio文件格式经常发生变动，drawio官网强烈建议使用cdn获取依赖资源，故此插件默认从网络拉取依赖。如果你希望将依赖资源保存在本地，请修改配置文件
 *
 * 支持配置项：allow-zoom-in、allow-zoom-out、auto-crop、auto-fit、auto-origin、border、center、check-visible-state、dark-mode、edit、editable、forceCenter、highlight、layerIds、layers、lightbox、max-height、move、nav、page、pageId、resize、responsive、source、target、title、titleTooltip、toolbar、toolbar-buttons、toolbar-nohide、toolbar-position、tooltips、xml、zoom
 *
 * 配置项使用方法请参考：https://github.com/jgraph/drawio/blob/f7158bfb0029a6456c215791b7fd005ccb5c3e76/src/main/webapp/js/diagramly/GraphViewer.js#L118C1-L118C71
 */
graphConfig = {
    // 必须配置项。表示.drawio文件的路径，支持本地路径和网络路径
    // 本地路径例如："./assets/example.drawio" 或者 "D:\\\\tmp\\\\example.drawio"
    // 网络路径例如："http://localhost:8000/example.drawio"
    "source": "https://cdn.jsdelivr.net/gh/obgnail/typora_images@master/image/example.drawio",

    // 如果存在多页，可以使用page切换
    "page": 0,
}
```
"""

############### callouts ###############
[callouts]
# 是否启用此二级插件
# 此插件诞生得很早，当时Typora还不支持callouts功能。然后typora在1.8版本原生支持了callouts，功能有一定程度的重叠。但是：
#   1. 原生功能仅支持五种类型的callouts，
#   2. 原生功能不支持fold callouts（如： > [!NOTE]-）。
#   3. 此插件兼容原生功能
enable = false
# 插件名称
name = "Callouts"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# callout的阴影
box_shadow = "0 0.2rem 0.5rem #0000000d, 0 0 0.05rem #0000001a"
# 为标题设置颜色（和left_line_color一样）
set_title_color = true
# 鼠标悬停在fold callout时展示其内容
hover_to_show_fold_callout = true
# 自动插入的模板
template = "> [!NOTE]\n> Support Type: TIP、BUG、INFO、NOTE、QUOTE、EXAMPLE、CAUTION、FAILURE、WARNING、SUCCESS、QUESTION、ABSTRACT、IMPORTANT"

# icon对应的字体。一旦修改此选项，就需要修改下面所有的icon
# 具体的icon值请参考：
#   - 旧版本Typora: {your_typora_path}/resources/app/style/font-awesome-4.1.0/css/font-awesome.css
#   - 新版本Typora: {your_typora_path}/resources/style/font-awesome-4.1.0/css/font-awesome.css
#   - 网络下载: https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf
font_family = "FontAwesome"
# callout的类型：
#  - type：            自定义的类型
#  - background_color：背景颜色
#  - left_line_color： 左侧竖线颜色
#  - icon：            图标
list = [
    { type = "tip", background_color = "#d8f2e5", left_line_color = "#3abd7e", icon = "\\f02c" },
    { type = "bug", background_color = "#feeed3", left_line_color = "#E0AC00", icon = "\\f188" },
    { type = "info", background_color = "#dff6dd", left_line_color = "#3abd7e", icon = "\\f05a" },
    { type = "note", background_color = "#e1d1eb", left_line_color = "#6a1b9a", icon = "\\f040" },
    { type = "quote", background_color = "#fafafa", left_line_color = "#777777", icon = "\\f10d" },
    { type = "example", background_color = "#f1edfd", left_line_color = "#777777", icon = "\\f133" },
    { type = "caution", background_color = "#fde7e9", left_line_color = "#c62828", icon = "\\f024" },
    { type = "failure", background_color = "#f4d4d4", left_line_color = "#c62828", icon = "\\f00d" },
    { type = "warning", background_color = "#feeed3", left_line_color = "#E0AC00", icon = "\\f071" },
    { type = "success", background_color = "#d8f2e5", left_line_color = "#3abd7e", icon = "\\f00c" },
    { type = "question", background_color = "#fff4ce", left_line_color = "#E0AC00", icon = "\\f128" },
    { type = "abstract", background_color = "#e5f8f8", left_line_color = "#777777", icon = "\\f00b" },
    { type = "important", background_color = "#d8e6f3", left_line_color = "#3b83c1", icon = "\\f132" },
]
# 所有【类型不属于list选项的callouts】都会使用默认的样式
# 默认的背景颜色
default_background_color = "#fafafa"
# 默认的左边线颜色
default_left_line_color = "#777777"
# 默认的icon
default_icon = "\\f075"


############### marp ###############
[marp]
# 是否启用此二级插件
enable = false
# 插件名称
name = "Marp"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 代码块语言
# 强烈建议不要修改。如果要修改，请跟着修改TEMPLATE选项里的语言
LANGUAGE = "marp"
# 开启交互模式（处于交互模式下，鼠标点击图表并不会展开代码块）
INTERACTIVE_MODE = true
# 自动插入的模板
TEMPLATE = """```marp
---
theme: gaia
_class: lead
paginate: true
backgroundColor: #fff
backgroundImage: url('https://marp.app/assets/hero-background.svg')
---

![bg left:40% 80%](https://marp.app/assets/marp.svg)

# **Marp**

Markdown Presentation Ecosystem

https://marp.app/

---

# How to write slides

Split pages by horizontal ruler (`---`). It's very simple! :satisfied:

"""


############### templater ###############
[templater]
# 是否启用此二级插件
enable = true
# 插件名称
name = "file-template"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 自动打开新文件
auto_open = true
# 除了内置的模板变量，还可以自定义模板变量（如果您不了解javascript，请勿修改此选项）
#   - enable   是否启用
#   - name     模板变量名（必须唯一）
#   - callback 回调函数的字符串
template_variables = [
    { enable = false, name = "author", callback = "() => 'obgnail'" },
    { enable = false, name = "sum", callback = "(v1 = 100, v2 = 200) => v1 + v2" },
    { enable = false, name = "sumList", callback = "args => args.reduce((x, y) => x + y, 0)" },
    { enable = false, name = "contact", callback = "(...args) => args.join('-')" },
]

# 如何在模板里使用变量？答：和javascript中调用函数基本一样，有两点不同：
#   1. 前后需要两个大括号包裹： myFunc(arg1, arg2) => {{ myFunc(arg1, arg2) }}
#   2. 若无实参，可去掉小括号： {{ myFunc() }} 等同于 {{ myFunc }}
# 例如，上述的自定义变量的使用方法如下（使用前记得将enable置为true）：
#   {{ author }}             将输出：obgnail
#   {{ sum }}                将输出：300
#   {{ sum(1, 2) }}          将输出：3
#   {{ sumList([1, 2]) }}    将输出：3
#   {{ contact("a", "b") }}  将输出：a-b

# 内置的模板变量：
#   {{ formatDate('yyyy-MM-dd', 'en') }}     当前格式化的日期时间。
#                                               参数1：时间格式化字符串。支持：yyyy|yyy|yy|MMMM|MMM|MM|M|dddd|ddd|dd|d|HH|H|hh|h|mm|m|ss|s|SSS|S|a
#                                               参数2：locale：支持 cn、en（默认en）
#   {{ datetime }}                           当前日期时间。等同于{{ formatDate('yyyy-MM-dd HH:mm:ss') }}
#   {{ date }}                               当前日期。等同于{{ formatDate('yyyy-MM-dd') }}
#   {{ time }}                               当前时间。等同于{{ formatDate('HH:mm:ss') }}
#   {{ weekday }}                            当前周几。等同于{{ formatDate('ddd') }}
#   {{ timestamp }}                          当前时间戳
#   {{ dateOffset(2, 'yyyy-MM-dd', 'en') }}  2天后的日期（2表示2天前的日期）
#   {{ yesterday }}                          昨天日期。等同于{{ dateOffset(-1) }}
#   {{ tomorrow }}                           明天日期。等同于{{ dateOffset(1) }}
#   {{ random }}                             范围为0-1的随机浮点数
#   {{ randomInt(2, 100) }}                  范围为2-100的随机整数
#   {{ randomStr(8) }}                       由字母和数字组成的8位随机字符串
#   {{ title }}                              新建文件的标题
#   {{ filepath }}                           新建文件的路径
#   {{ folder }}                             当前文件的目录
#   {{ mountFolder }}                        当前文件的挂载目录
#   {{ username }}                           当前电脑的用户名
#   {{ range }}                              当前选取的文字
#   {{ uuid }}                               uuid

# 模板
[[templater.template]]
name = "标准模板"
text = """---
title: {{title}}
date: {{date}}
tags:
---

"""
[[templater.template]]
name = "日记"
text = """---
title: {{title}}
date: {{date}} {{weekday}}
---

"""
[[templater.template]]
name = "文章写作"
text = """---
author: {{username}}
created: {{datetime}}
aliases: {{title}}
description:
tags:
---
## 关键字




## 概述和背景



## 注释


"""


############### chineseSymbolAutoPairer ###############
[chineseSymbolAutoPairer]
# 是否启用此二级插件
# 注意：此插件受Typora本身配置【匹配括号和引号】的影响，如果此配置为false，那么此插件自动禁用
enable = true
# 插件名称
name = "ChineseSymbol-AutoPairer"
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 兼容以前的行为：当用户输入【】时，不会变成【】】，而是将光标跳到】的右边
auto_skip = true
# 当光标在中间，左右两边都是成对符号，如：【|】；且用户键入Backspace时，同时删除左右两边的符号
auto_delete_pair = true
# 当框选文字时，键入中文符号，自动包裹框选文字
auto_surround_pair = true
# 自动包裹框选文字后，自动框选文字
auto_select_after_surround = true
# 需要自动补全的符号（第一项为输入符号，第二项为补全符号）
# NOTE：此插件存在一个问题：中文的前后引号是不一样的，如果你键入的是后引号，此时便无法正常配对补全（我不确定要不要修复，似乎搜狗输入法就没有修复此问题）
auto_pair_symbols = [
    ["（", "）"],
    ["《", "》"],
    ["‘", "’"],
    ["“", "”"],
    ["【", "】"],
    ["「", "」"],
    ["『", "』"],
]


############### toc ###############
[toc]
# 是否启用此二级插件
enable = false
# 插件名称
name = "toc"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 是否转义标题内容
escape_header = true
# 右键点击侧边栏的【大纲】按钮触发
right_click_outline_button_to_toggle = true
# 当pin到页面右侧时，占据页面的20%宽度
width_percent_when_pin_right = 20
# 每次打开Typora时，默认弹出右侧菜单栏
default_show_toc = false
# 字体大小
toc_font_size = "1em"
# 在窗口里展示的名字
show_name = { fence = "Fence", image = "Figure", table = "Table", link = "Link", math = "Math" }


############### resourceOperation ###############
[resourceOperation]
# 是否启用此二级插件
enable = false
# 插件名称
name = "资源管理"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 弹窗位于页面从左往右的5%位置
modal_left_percent = 5
# 弹窗占据页面的90%宽度
modal_width_percent = 90
# 弹窗占据页面的70%高度
modal_height_percent = 70
# 什么后缀判定为资源（本插件通过后缀名来判断是否为资源）
resource_suffix = [".jpg", ".jpeg", ".png", ".gif", ".svg", ".tiff", ".ico", ".webp", ".webm", ".bmp", ".mp3", ".mp4", ".ogg", ".image", ".jfif", ".gif!large", ".gif!small"]
# 什么后缀判定为md文件
markdown_suffix = [".md", ".markdown", ".mdown", ".mmd", ".rmarkdown", ".mkd", ".mdwn", ".mdtxt", ".rmd", ".mdtext"]
# 对于无后缀名的文件视为资源
collect_file_without_suffix = true
# 忽略的目录
ignore_folders = [".git", "node_modules"]
# 是否忽略html标签<img src="example.jpg">里的资源（markdown是支持插入html的，此选项问是否要忽略img标签）
ignore_img_html_element = false


############### scrollBookmarker ###############
[scrollBookmarker]
# 是否启用此二级插件
enable = false
# 插件名称
name = "书签管理"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 数据持久化（作为文件保存起来）
persistence = true
# 当alt+click时，自动弹出窗口
auto_popup_modal = true


############### imageReviewer ###############
[imageReviewer]
# 是否启用此二级插件
enable = false
# 插件名称
name = "view-image"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 点击遮罩空白处退出
click_mask_to_exit = true
# 跳过加载失败的图片
filter_error_image = true
# 是否显示缩略图列表
show_thumbnail_nav = true
# 工具栏的位置：bottom/top
tool_position = "top"
# 进入查看器后，第一张图片是？
#   1. inViewBoxImage：     当前视图里第一张图片
#   2. closestViewBoxImage：距离当前视图中心最近的一张图片
#   3. firstImage：         整篇文档的第一张图片
# 为什么是个列表？答：优先级。
# ["inViewBoxImage", "firstImage"]：首先寻找当前视图里第一张图片，若找不到，则使用文档的第一张图片
first_image_strategies = ["inViewBoxImage", "firstImage"]
# 在工具栏左侧，展示的图片信息：
#   1. index: 第几张图片
#   2. title: 图片名称
#   3. size:  图片大小
show_message = ["index", "title", "size"]
# 每次缩放的比率
zoom_scale = 0.1
# 每次旋转的角度
rotate_scale = 10
# 每次倾斜的角度
skew_scale = 1
# 每次移动的像素
translate_scale = 10
# 轮播图片时的停留时间（单位：s）
play_second = 3
# 遮罩层的不透明度
mask_background_opacity = 0.6
# 图片最多占据80%的页面宽度
image_max_width = 80
# 图片最多占据70%的页面高度
image_max_height = 70
# 背景模糊等级: 数值越大越模糊（为0则不模糊）
blur_level = 6
# 预览图列表的高度
thumbnail_height = "80px"
# 预览图额外预览几个图片
thumbnail_scroll_padding_count = 3
# 预览图如何适应容器尺寸
#   - fill:       拉伸以适配容器
#   - contain:    保持比例缩放图片
#   - cover:      保持图片原有尺寸，超出的内容被剪切
#   - scale-down: 类似于contain，但是当图片尺寸小于容器尺寸时，不会放大
thumbnail_object_fit = "scale-down"
# 瀑布流格式的列数
water_fall_columns = 5

# 图片支持以下操作：
#   - dummy:          无功能
#   - close:          关闭
#   - download:       下载网络图片（若此图片是本地图片，则失效）
#   - scroll:         定位到文档
#   - play:           轮播
#   - location:       打开图片路径
#   - nextImage:      下张图
#   - previousImage:  上张图
#   - firstImage:     第一张图
#   - lastImage:      最后一张图
#   - thumbnailNav:   显示/隐藏缩略图列表
#   - waterFall:      显示/隐藏瀑布流
#   - zoomIn:         放大图片
#   - zoomOut:        缩小图片
#   - rotateLeft:     图片向左旋转
#   - rotateRight:    图片向右旋转
#   - hFlip:          水平翻转图片
#   - vFlip:          垂直翻转图片
#   - translateLeft:  向左移动
#   - translateRight: 向右移动
#   - translateUp:    向上移动
#   - translateDown:  向下移动
#   - incHSkew:       图片增大水平倾斜
#   - decHSkew:       图片减小水平倾斜
#   - incVSkew:       图片增大垂直倾斜
#   - decVSkew:       图片减小垂直倾斜
#   - originSize:     还原图片尺寸
#   - fixScreen:      图片大小适配屏幕
#   - autoSize:       图片大小在【原先尺寸】和【适配屏幕】之间切换
#   - restore:        图片恢复为最初状态

# 图片的操作提供多个入口：
#   - 工具栏按钮
#   - 鼠标左中右键（可同时配合ctrl、shift、alt等修饰按键）
#   - 快捷键

# 工具栏按钮
# 有两点需要注意：
#   1. 可选项比上面的功能多了一个info，用于提示
#   2. 若是本地图片，download按钮会自动隐藏
tool_function = ["info", "waterFall", "thumbnailNav", "download", "play", "firstImage", "lastImage", "restore", "vFlip", "hFlip", "autoSize", "rotateRight", "scroll", "location", "close"]

# 鼠标点击图片绑定的功能
# 三项分别为左键、中键、右键
mousedown_function = ["nextImage", "close", "previousImage"]
# ctrl+鼠标图片时，绑定的功能
ctrl_mousedown_function = ["hFlip", "dummy", "vFlip"]
# shift+鼠标图片时，绑定的功能
shift_mousedown_function = ["autoSize", "dummy", "dummy"]
# alt+鼠标图片时，绑定的功能
alt_mousedown_function = ["restore", "location", "dummy"]

# 当鼠标位于图片时，上下滚动绑定的功能
# 两项分别为向上滚动、向下滚动
wheel_function = ["zoomIn", "zoomOut"]
# 当鼠标位于图片时，ctrl+上下滚动绑定的功能
ctrl_wheel_function = ["rotateRight", "rotateLeft"]
# 当鼠标位于图片时，shift+上下滚动绑定的功能
shift_wheel_function = ["incHSkew", "decHSkew"]
# 当鼠标位于图片时，alt+上下滚动绑定的功能
alt_wheel_function = ["incVSkew", "decVSkew"]

# 快捷键（仅在进入查看器后可用）
# 第一项为快捷键，第二项为绑定的功能
hotkey_function = [
    # 基础
    ["j", "nextImage"],
    ["k", "previousImage"],
    ["=", "nextImage"],
    ["-", "previousImage"],
    ["shift+j", "lastImage"],
    ["shift+k", "firstImage"],
    ["l", "scroll"],
    ["q", "close"],
    ["escape", "close"],
    [" ", "play"],
    # 翻转
    ["h", "hFlip"],
    ["v", "vFlip"],
    # 旋转
    ["r", "rotateRight"],
    ["shift+r", "rotateLeft"],
    # 移动
    ["ArrowUp", "translateUp"],
    ["ArrowDown", "translateDown"],
    ["ArrowLeft", "translateLeft"],
    ["ArrowRight", "translateRight"],
    ["w", "translateUp"],
    ["s", "translateDown"],
    ["a", "translateLeft"],
    ["d", "translateRight"],
    # 大小
    ["z", "originSize"],
    ["x", "zoomIn"],
    ["c", "zoomOut"],
    ["shift++", "zoomIn"],
    ["shift+_", "zoomOut"],
]


############### markdownLint ###############
[markdownLint]
# 是否启用此二级插件
enable = false
# 插件名称
name = "markdown-format"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 快捷键：尽力修复规范
hotkey_fix_lint_error = ""
# 检测规则（参考：https://github.com/DavidAnson/markdownlint/blob/main/doc/Rules.md）
rule_config = { default = true, MD009 = false, MD010 = false, MD012 = false, MD013 = false, MD024 = { siblings_only = true }, MD033 = false, MD041 = false }
# 将检测规则的案文翻译为中文
translate = true
# 弹窗的宽度
#   1. auto:  根据文字自适应
#   2. 500px: 500像素（不一定是500，可以任何正整数）
modal_width = "auto"
# 弹窗的最大高度
modal_max_height = "500px"
# 弹窗的字体大小
modal_font_size = "14px"
# 弹窗的文字行高
modal_line_height = 1.2
# 在右上角添加一个方块，用以提示lint状态
# 若置为false，以下配置全部失效
use_button = true
# 方块的宽度
button_width = "15px"
# 方块的高度
button_height = "15px"
# lint通过时方块的颜色
pass_color = "#499c54"
# lint未通过时方块的颜色
error_color = "#be9117"


############### reopenClosedFiles ###############
[reopenClosedFiles]
# 是否启用此二级插件（此插件仅在window_tab插件启用时生效）
enable = false
# 插件名称
name = "reopenClosedFiles"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# 打开Typora（打开可丢弃的无标题的标签时）自动恢复上次退出时尚未关闭的标签页
# 注意：只当双击typora.exe打开Typora时生效（因为打开特定文件时，自动恢复上次退出时尚未关闭的标签页，明显不符合用户预期）
auto_reopen_when_init = true


############### quickButton ###############
[quickButton]
# 是否启用此二级插件
enable = true
# 插件名称
name = "quick-button"
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 切换按钮显示状态的快捷键
hotkey = ""
# 是否支持右键（右键点击按钮后，其他按钮将被隐藏）
support_right_click = true
# 按钮的尺寸
button_size = "35px"
# 按钮的圆角半径
button_border_radius = "4px"
# 按钮的阴影
button_box_shadow = "0px 1px 20px 0px rgba(0,0,0,0.1), inset 0px -1px 0px 0px rgba(0,0,0,0.1)"
# 按钮之间的间隔
button_gap = "10px"
# 按钮距离右边框的距离
position_right = "30px"
# 按钮距离底边框的距离
position_bottom = "50px"
# 是否隐藏按钮的hint，若为true，则下面buttons配置的hint选项都将失效
hide_button_hint = false
# 如果您没有javascript基础，请不要修改以下配置
# 添加的按钮：
#   disable:      禁用此按钮
#   coordinate:   按钮坐标。往上为x轴正方向，往左为y轴正方向，从零开始计数
#   icon:         按钮图标。填入css class。支持font-awesome-4.1.0和ionicons-2.0.1，所有的图标及其对应的css class请参考：https://www.adfwebmagazine.jp/wp-content/uploads/test_v4.1.pdf  和  https://ionic.io/ionicons/v2
#   size(可选):    图标大小。默认17px
#   color(可选):   图标颜色。默认跟随当前主题的配色方案
#   bgColor(可选): 图标背景色。默认跟随当前主题的配色方案
#   hint:         提示信息
#   callback:     回调函数。采用pluginName.MethodName的形式（功能就像hotkey.default.toml中的plugin参数和function参数的合体）
#                     MethodName请通过阅读源码查找。如果您不懂代码，但还是想添加按钮，有个碰运气技巧：在【右键菜单->常用插件->二级插件】的插件基本都是XXX.callback，其余插件基本都是XXX.call
#   evil(危险):    自定义回调函数。功能同hotkey.default.toml中的evil参数（它能用的，这里也能用）。这里的文本内容会被eval()。如果设置此参数，callback参数会失效
buttons = [
    { disable = false, coordinate = [0, 0], hint = "直达底部", size = "24px", icon = "fa fa-caret-down", callback = "go_top.goBottom" },
    { disable = false, coordinate = [1, 0], hint = "直达顶部", size = "24px", icon = "fa fa-caret-up", callback = "go_top.goTop" },
    { disable = true, coordinate = [2, 0], hint = "文字风格", size = "17px", icon = "fa fa-font", callback = "text_stylize.call" },
    { disable = true, coordinate = [3, 0], hint = "混排优化", size = "17px", icon = "fa fa-align-justify", callback = "md_padding.call" },
    { disable = true, coordinate = [0, 1], hint = "思维导图", size = "18px", icon = "fa fa-sitemap", callback = "markmap.onButtonClick" },
    { disable = true, coordinate = [1, 1], hint = "图片管理", size = "17px", icon = "fa fa-image", callback = "imageReviewer.callback" },
    { disable = true, coordinate = [2, 1], hint = "文档大纲", size = "17px", icon = "fa fa-list", callback = "toc.callback" },
    { disable = true, coordinate = [3, 1], hint = "高亮搜索", size = "17px", icon = "fa fa-search", callback = "search_multi.call" },
    # evil使用示例：
    #   弹窗提示
    { disable = true, coordinate = [4, 0], hint = "危险操作", size = "17px", icon = "ion-asterisk", color = "#f0f8ff", bgColor = "#ff4500", evil = "() => window.confirm('this is message')" },
    #   在光标处插入javascript代码块
    { disable = true, coordinate = [4, 1], hint = "危险操作", size = "17px", icon = "ion-alert-circled", evil = '() => this.utils.insertText(null, "```javascript\n```", false);' },
    #   打开windows计算器
    { disable = true, coordinate = [5, 0], hint = "危险操作", size = "17px", icon = "ion-bug", evil = "() => this.utils.Package.ChildProcess.exec('cmd /C calc')" },
    #   打开网址
    { disable = true, coordinate = [5, 1], hint = "危险操作", size = "17px", icon = "ion-alert", evil = "() => this.utils.openUrl('https://github.com/obgnail/typora_plugin')" },
]


############### blockSideBySide ###############
[blockSideBySide]
# 是否启用此二级插件
enable = false
# 插件名称
name = "并列显示活动块"
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 切换的快捷键
hotkey = ""


############### redirectLocalRootUrl ###############
# 如果你主要使用obsidian或joplin来管理文件，偶尔用typora，就会遇到一个问题：obsidian或joplin都是将本地资源放在同一个目录中（vault），这导致在typora打开后文件由于路径错误，无法访问本地资源。
# 此插件就是为了解决此问题，重定向本地资源根目录。相关issue: https://github.com/obgnail/typora_plugin/issues/259
# 除非你有此需求，否则不建议开启此插件
[redirectLocalRootUrl]
# 是否启用此二级插件
# 注意：【文件的front matter的typora-root-url参数】的优先级大于【此插件】。也就是说：若文件的front matter显式设置了typora-root-url，那么此插件在该文件失效
enable = false
# 插件名称
name = "重定向本地资源根目录"
# 是否在右键菜单中隐藏
hide = true
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 资源根目录，支持绝对路径(如D:\\tmp\\img)和相对路径(如.\\assets)，填写时请注意转义反斜线（若为空，则此插件失效）
root = "./"
# 过滤的正则表达式：只有文件路径命中filter_regexp匹配的文件才使用此插件（若为空，则全部文件都使用此插件）
filter_regexp = ""


############### openInTotalCommander ###############
[openInTotalCommander]
# 是否启用此二级插件（若要使用此插件，请先修改tc_path选项）
enable = false
# 插件名称
name = "TC打开"
# 是否在右键菜单中隐藏
hide = false
# 在右键菜单中的出现顺序（越大越排到后面，允许负数）
order = 1
# 快捷键
hotkey = ""
# tc路径（请修改为你电脑上的路径）
tc_path = "D:\\software\\TotalCMD_64bit_10.52\\TOTALCMD64.EXE"
# tc命令参数（参考：https://www.ghisler.ch/wiki/index.php/Command_line_parameters）
# 内置的环境变量:
#   $f: 当前文件路径
#   $d: 当前文件所属目录
#   $m: 当前挂载目录（侧边栏的根目录）
tc_args = '/O /T /P=L  /L=$f'
